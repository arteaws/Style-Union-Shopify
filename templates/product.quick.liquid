{% layout none %}

{%- liquid
  assign show_vendor = settings.vendor
  assign show_sku = false
  assign show_quantity = true
  assign show_payment_button = settings.show_payment_button
  assign current_variant = product.selected_or_first_available_variant
-%}

<template data-html="content">
  <div class="product__inner-wrapper product__quickview-wrapper product-{{ product.id }} js-quickview-wrapper"
    data-product-id="{{ product.id }}"
    data-section-id="{{ section.id }}">

    {%- render 'product-json', product: product -%}

    <div class="product__section-container">
      <!-- Product images section -->
      <div class="product__section-images">
        {%- if product.featured_media -%}
          {% render 'product-image-gallery', product: product %}
        {%- else -%}
          {% capture current %}{% cycle 1, 2, 3, 4, 5, 6 %}{% endcapture %}
          <div class="span-12">
            {{ 'product-' | append: current | placeholder_svg_tag: 'placeholder-svg' }}
          </div>
        {%- endif -%}
      </div>

      <!-- Product content section -->
      <div class="product__section-content">
        <div class="product__section-details">
          <!-- Product header -->
          <div class="product__section--header product__section--element">
            {% if show_vendor %}
              <h4 class="product__vendor">{{ product.vendor }}</h4>
            {% endif %}
            <h3 class="product__section-title product-title">
              <a href="{{ product.url }}">{{ product.title }}</a>
            </h3>
            {% render 'product-price', variant: current_variant, product: product %}
          </div>

          <!-- Swatches section -->
          {% unless product.has_only_default_variant %}
            <div class="product__variants-swatches mt4 mb6 no-js-hidden" 
                 data-section="{{ section.id }}" 
                 data-url="{{ product.url }}"
                 id="quickview-swatches-{{ product.id }}">
              {% for option in product.options_with_values %}
                {% render "swatch",
                  option: option,
                  current_variant: current_variant,
                  product: product,
                  show_color_swatches: settings.show_color_swatches,
                  color_swatch_shape: settings.color_swatch_shape,
                  color_swatch_style: settings.color_swatch_style,
                  section_id: section.id,
                  is_quick_view: true %}
              {% endfor %}
            </div>
          {% endunless %}

          <!-- Quantity selector -->
          <div class="product__section--qty qty-selection product__section--element">
            <label for="qty-{{ product.id }}" class="h5">{{ 'products.product.quantity' | t }}</label>
            <div class="product__quantity--wrapper">
              <button class="down quantity-control-down" type="button">-</button>
              <input id="qty-{{ product.id }}" min="1" type="text" name="quantity" class="formQty quantity" value="1" />
              <button class="up quantity-control-up" type="button">+</button>
            </div>
          </div>

          <!-- Add to cart button -->
          <div class="product__section--buttons product-add product__section--element">
            {% form 'product', product, class: "product__form-buttons" %}
              <input type="hidden" name="id" value="{{ current_variant.id }}">
              <input type="hidden" name="quantity" value="1">
              <button type="submit" name="add" class="add-to-cart" {% unless current_variant.available %}disabled{% endunless %}>
                {% if current_variant.available %}
                  {{ 'products.product.add_to_cart' | t }}
                {% else %}
                  {{ 'products.product.sold_out' | t }}
                {% endif %}
              </button>
            {% endform %}
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<style>
  /* Swatch Styles */
  .swatch-sold-out {
    opacity: 0.6;
    pointer-events: none;
  }
  
  .swatches__container {
    margin-bottom: 15px;
  }
  
  .swatches__option-name {
    font-weight: bold;
    margin-bottom: 8px;
  }
  
  .swatches__swatch--color {
    display: inline-block;
    margin: 0 10px 10px 0;
  }
  
  .swatches__swatch--color .swatches__form--label {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: block;
    border: 1px solid #e0e0e0;
  }
  
  .swatches__swatch--regular {
    display: inline-block;
    margin: 0 10px 10px 0;
  }
  
  .swatches__swatch--regular .swatches__form--label {
    padding: 8px 12px;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    display: inline-block;
  }
  
  .swatches__form--input {
    position: absolute;
    opacity: 0;
  }
  
  .swatches__form--input:checked + .swatches__form--label {
    border-color: #000;
    background-color: #000;
    color: #fff;
  }
  
  .crossed-out {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
  
  .crossed-out::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    width: 100%;
    height: 1px;
    background: #000;
    transform: rotate(45deg);
  }
  
  .size-strike-on {
    position: relative;
    opacity: 0.6;
  }
  
  .size-strike-on::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    width: 100%;
    height: 1px;
    background: #000;
    transform: rotate(45deg);
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Initialize quick view swatches when drawer opens
  function initQuickViewSwatches() {
    const quickView = document.querySelector('.js-quickview-wrapper');
    if (!quickView) return;
    
    const productId = quickView.getAttribute('data-product-id');
    const swatchContainer = document.getElementById(`quickview-swatches-${productId}`);
    if (!swatchContainer) return;
    
    // Get product data
    const productData = JSON.parse(quickView.querySelector('[data-product-json]').textContent);
    const variants = productData.variants;
    
    // Initialize swatches
    initSwatches(swatchContainer, variants);
  }
  
  // Main swatch initialization function
  function initSwatches(container, variants) {
    const colorOptions = {{ settings.swatch_option_names | replace: ' ,', ',' | replace: ', ', ',' | split: ',' | downcase | json }};
    const sizeOptions = ["size", "sizes"];
    
    // Set up event listeners for all swatches
    const swatches = container.querySelectorAll('.js-swatch-element');
    swatches.forEach(swatch => {
      const input = swatch.querySelector('.swatches__form--input');
      if (!input) return;
      
      input.addEventListener('change', function() {
        updateSelectedSwatches(container);
        const optionName = swatch.closest('.js-variant-selector').getAttribute('data-option-name');
        
        if (colorOptions.includes(optionName)) {
          updateSizeAvailability(container, variants, colorOptions, sizeOptions);
        } else if (sizeOptions.includes(optionName)) {
          updateColorAvailability(container, variants, colorOptions, sizeOptions);
        }
      });
    });
    
    // Initial setup
    updateSelectedSwatches(container);
    updateSizeAvailability(container, variants, colorOptions, sizeOptions);
    updateColorAvailability(container, variants, colorOptions, sizeOptions);
  }
  
  // Update selected state of swatches
  function updateSelectedSwatches(container) {
    container.querySelectorAll('.js-swatch-element').forEach(swatch => {
      const input = swatch.querySelector('.swatches__form--input');
      if (input && input.checked) {
        swatch.classList.add('selected');
      } else {
        swatch.classList.remove('selected');
      }
    });
  }
  
  // Update size availability based on selected color
  function updateSizeAvailability(container, variants, colorOptions, sizeOptions) {
    // Get selected color
    const colorSelector = container.querySelector('.js-variant-selector[data-option-name="' + colorOptions[0] + '"]');
    if (!colorSelector) return;
    
    const selectedColor = colorSelector.querySelector('.swatches__form--input:checked');
    if (!selectedColor) return;
    const colorValue = selectedColor.value;
    
    // Update size swatches
    const sizeSelector = container.querySelector('.js-variant-selector[data-option-name="' + sizeOptions[0] + '"]');
    if (!sizeSelector) return;
    
    sizeSelector.querySelectorAll('.js-swatch-element').forEach(sizeSwatch => {
      const sizeValue = sizeSwatch.getAttribute('data-option-value');
      const isAvailable = checkVariantAvailable(variants, colorValue, sizeValue);
      
      if (isAvailable) {
        sizeSwatch.classList.remove('size-strike-on', 'swatch-sold-out');
      } else {
        sizeSwatch.classList.add('size-strike-on', 'swatch-sold-out');
      }
    });
  }
  
  // Update color availability based on selected size
  function updateColorAvailability(container, variants, colorOptions, sizeOptions) {
    // Get selected size
    const sizeSelector = container.querySelector('.js-variant-selector[data-option-name="' + sizeOptions[0] + '"]');
    if (!sizeSelector) return;
    
    const selectedSize = sizeSelector.querySelector('.swatches__form--input:checked');
    if (!selectedSize) return;
    const sizeValue = selectedSize.value;
    
    // Update color swatches
    const colorSelector = container.querySelector('.js-variant-selector[data-option-name="' + colorOptions[0] + '"]');
    if (!colorSelector) return;
    
    colorSelector.querySelectorAll('.js-swatch-element').forEach(colorSwatch => {
      const colorValue = colorSwatch.getAttribute('data-option-value');
      const isAvailable = checkVariantAvailable(variants, colorValue, sizeValue);
      
      if (isAvailable) {
        colorSwatch.classList.remove('swatch-hidden', 'swatch-sold-out');
      } else {
        colorSwatch.classList.add('swatch-hidden', 'swatch-sold-out');
      }
    });
  }
  
  // Check if variant is available
  function checkVariantAvailable(variants, option1, option2) {
    for (const variant of variants) {
      if ((variant.option1 === option1 || variant.option2 === option1 || variant.option3 === option1) &&
          (variant.option1 === option2 || variant.option2 === option2 || variant.option3 === option2)) {
        return variant.available;
      }
    }
    return false;
  }
  
  // Initialize when quick view opens
  document.addEventListener('quickview:open', initQuickViewSwatches);
  
  // Also initialize if quick view is already open
  setTimeout(initQuickViewSwatches, 300);
});
</script>