{% layout none %}

{%- liquid

  assign show_vendor = settings.vendor
  assign show_sku = false
  assign show_quantity = true
  assign show_payment_button = settings.show_payment_button
  assign current_variant = product.selected_or_first_available_variant
  assign show_payment_button = settings.show_payment_button

-%}

<style>
.swatch-sold-out .color_dflex {
    opacity: 0.6;
}  

.swatch-sold-out .color_dflex .swatches__form--label .crossed-out{
  display:block !important;
}  
  
.color_dflex {
    display: flex;
    flex-direction: column;
    align-items: center;
}
.swatches__color-name{
  font-size: 12px;
}
.swatch-hidden {
    display: none !important;
}

span.price__badge.price__badge--sold-out {
    display: none;
}  
.swatch-sold-out .swatches__form--label {
    cursor: not-allowed;
}

.swatches__sold-out--image.crossed-out {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 2;
    display: none;
}

.swatch-sold-out .swatches__sold-out--image.crossed-out {
    display: block;
}

.swatches__sold-out--image.crossed-out::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, transparent 48%, #000000 48%, #000000 52%, transparent 52%);
    z-index: 3;
    pointer-events: none;
}

.size-strike-on {
    position: relative;
    opacity: 0.6;
}
 .custom-outer-sold-out{
   width:60px;
   height:40px;
 } 
.custom-outer-sold-out .swatches__form--label {
  width: 100%;
  height: 100%;
}
.size-strike-on::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 68px;
  height: 1px;
  background-color: #000000;
  transform: translate(-50%, -50%) rotate(31deg);
  z-index: 2;
  pointer-events: none;
}
.size-strike-on.selected-cs::before {
background-color: #fff;
}
.size-strike-on .swatches__form--label {
    cursor: not-allowed;
}

.swatches__form--label {
    position: relative;
    display: inline-block;
}

.swatches__swatch--regular.selected-cs .swatches__form--label {
    background-color: #000;
    color: #fff;
}
</style>

<template data-html="content">
  <div class="product__inner-wrapper product__quickview-wrapper product-{{ product.id }} js-quickview-wrapper"
    data-payment-button="{{ settings.show_payment_button }}"
    data-product-id="{{ product.id }}"
    data-section-id="{{ section.id }}"
    data-sale-format="{{ settings.sale_items }}"
    data-url="{{ product.url }}"
    data-initial-variant="{{ current_variant.featured_media.id }}">

      {%- render 'product-json', product: product -%}

      {%- capture product_gallery_config -%}{
        "thumbPosition": "bottom",
        "enableVideoLooping": "false",
        "mainSlider": {% if product.media.size <= 1 %}false{% else %}true{% endif %},
        "thumbSlider": {% if product.media.size >= 4 %}true{% else %}false{% endif %},
        "productId": {{ product.id | json }},
        "isQuick": true
     }{%- endcapture -%}

     {% capture product_form_config %}
       { "money_format": {{ shop.money_format | json }},
         "enable_history": false,
         "sold_out": {{ "products.product.sold_out" | t | json }},
         "button": {{ 'products.product.add_to_cart' | t | json }},
         "unavailable": {{ 'products.product.unavailable' | t | json }},
         "savings": {{ 'products.general.savings' | t | json }},
         "quickview": true,
         "featured_product": false,
         "swatches": {{ settings.product_variants | json }}
       }
     {% endcapture %}

      <div class="product__section-container">
        <div class="product__section-images carousel-container js-product-gallery"
        data-product-gallery data-product-single-media-group data-gallery-config='{{ product_gallery_config }}'>
          {%- if product.featured_media -%}
            {% render 'product-image-gallery',
              product: product,
              thumbnail_position: 'bottom',
              click_to_enlarge: 'false',
              enable_video_looping: 'false' %}
          {%- else -%}
            {% capture current %}{% cycle 1, 2, 3, 4, 5, 6 %}{% endcapture %}
            <div class="span-12">
              {{ 'product-' | append: current | placeholder_svg_tag: 'placeholder-svg' }}
            </div>
          {%- endif -%}
        </div>
        <div class="product__section-content">
          <div class="product__section-details">

            <div class="product__section--header product__section--element">
              {% if show_vendor %}
                <h4 class="product__vendor">{{ product.vendor }}</h4>
              {% endif %}
              <h3 class="product__section-title product-title">
                <a href="{{ product.url }}">
                  {{ product.title }}
                </a>
              </h3>

              {% render 'product-price', variant: current_variant, product: product %}

              {%- form 'product', product, id: 'product-form-installment' -%}
                <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
                <select style="display:none;" name='id'>
                  {% for variant in product.variants %}
                    <option value="{{ variant.id }}" {% if variant == current_variant %}selected="selected"{% endif %}></option>
                  {% endfor %}
                </select>
                <div class="spi-banner">
                  {{ form | payment_terms }}
                </div>
              {%- endform -%}
            </div>

                <!-- Product variants with enhanced swatch functionality -->
                {%- assign product_form_id = 'product-form-' | append: section.id -%}
                {% form 'product', product,
                   id: product_form_id,
                   class: "product__form-container product_form relative",
                   data-product-form: product_form_config,
                   data-product-id: product.id %}

                  {%- unless product.has_only_default_variant -%}
                   {%- if settings.product_variants == 'swatches' -%}
                     <div class="product__variants-swatches mt4 mb6 no-js-hidden" data-section="{{ section.id }}" data-url="{{ product.url }}">
                       {% for option in product.options_with_values %}
                         {%- liquid
                           assign option_name = option.name | downcase
                           assign color_swatch_options = settings.swatch_option_names | replace: ' ,', ',' | replace: ', ', ',' | split: ',' | downcase
                           assign current_option = "option" | append: option.position
                           assign other_options = "option1 option2 option3" | remove: current_option | strip | split: " "
                           assign size_swatches = "size, sizes" | split: ", "
                         -%}

                         <div class="swatches__container js-variant-selector product__section--element" data-option-index="{{ option.position }}" data-option-name="{{ option.name | downcase }}" data-other-options='{{ other_options | json }}'>

                           <p class="swatches__option-name">{{ option.name }}: {% for value in option.values %}{% if option.selected_value == value %}<span id="selected-option-{{ option.position }}" class="swatches__option-value">{{ value }}</span>{% endif %}{% endfor %}</p>

                           {% for value in option.values %}
                             {%- liquid
                               assign image_url = value | handle | append: '.png' | file_url
                               assign css_color = value | split: ' ' | last | handle
                               assign available = false
                               assign swatch_image_url = nil
                               assign variant_image_url = nil
                               
                               if value.swatch.image
                                 assign swatch_image_url = value.swatch.image | image_url: width: 50
                               endif
                               if value.swatch.color and color_swatch_style == 'swatch'
                                 assign css_color = value.swatch.color
                               endif
                             -%}

                             <!-- Checking Availability -->
                             {%- liquid
                               assign available = false
                               assign variant_exists = false

                               for variant in product.variants
                                 unless variant[current_option] == value
                                   continue
                                 endunless

                                 unless variant[other_options[0]] == current_variant[other_options[0]]
                                   continue
                                 endunless

                                 unless variant[other_options[1]] == current_variant[other_options[1]]
                                   continue
                                 endunless

                                 assign variant_exists = true
                                 if variant.available
                                   assign available = true
                                 endif
                               endfor
                             -%}

                             <!-- Building Variant Image -->
                             {%- liquid
                               for variant in product.variants
                                 unless variant[current_option] == value
                                   continue
                                 endunless

                                 unless variant[other_options[0]] == current_variant[other_options[0]]
                                   continue
                                 endunless

                                 unless variant[other_options[1]] == current_variant[other_options[1]]
                                   continue
                                 endunless

                                 if variant.image
                                   assign variant_image_url = variant.image | image_url: width: 100, height: 100, crop: 'center'
                                 endif
                                 break
                               endfor

                               assign checked = ""
                               if current_variant[current_option] == value
                                 assign checked = 'checked="checked"'
                               endif

                               assign swatch_img = null
                               assign swatch_color_name = value | handle | append: '.png'

                               if images[swatch_color_name] != blank
                                 assign swatch_img = swatch_color_name | file_url
                               endif
                             -%}

                             {% capture radio_button %}
                               <input type="radio" id="{{ section.id }}-{{ option.name }}-{{ forloop.index0 }}"
                                   class="swatches__form--input"
                                   name="{{ option_name }}"
                                   value="{{ value | escape }}"
                                   form="product-form-{{ section.id }}"
                                   data-position="{{ option.position }}"
                                   data-option-value="{{ value | escape }}"
                                   {{ checked }}>
                             {% endcapture %}

                             {% capture sold_out_cross %}
                               <div class="swatches__sold-out--image crossed-out"></div>
                             {% endcapture %}

                             {% capture regular_swatch %}
                               <div class="swatches__swatch--regular swatch-element {% unless available %}soldout{% endunless %} js-swatch-element custom-outer-sold-out" data-option-value="{{ value | escape }}" data-option-position="{{ option.position }}" data-available="{{ available }}">
                                 {{ radio_button }}
                                 <label class="swatches__form--label" for="{{ section.id }}-{{ option.name }}-{{ forloop.index0 }}" tabindex="0">
                                   {{ value }}
                                   {{ sold_out_cross }}
                                 </label>
                               </div>
                             {% endcapture %}

                             {% capture color_swatch %}
                               <div class="swatches__swatch--color swatch-element color swatches__shape--{{ color_swatch_shape }} {% unless available %}soldout{% endunless %} js-swatch-element parent-dflex" data-option-value="{{ value | escape }}" data-option-position="{{ option.position }}" data-available="{{ available }}">
                                 <div class="color_dflex">
                                 {{ radio_button }}
                                 {% if variant_image_url %}
                                   <label class="swatches__form--label"
                                     for="{{ section.id }}-{{ option.name }}-{{ forloop.index0 }}"
                                     tabindex="0"
                                     style="background-image: url({{ variant_image_url }}); background-position: center center; background-size: cover;">
                                    {{ sold_out_cross }}
                                   </label>
                                   <span class="swatches__color-name">{{ value | truncatewords:1 }}</span>
                                 {% else %}
                                   <label class="swatches__form--label fallback"
                                     for="{{ section.id }}-{{ option.name }}-{{ forloop.index0 }}"
                                     tabindex="0"
                                     style="background-color: {{ css_color }};">
                                      {{ sold_out_cross }}
                                   </label>
                                   <span class="swatches__color-name">{{ value }}</span>
                                 {% endif %}
                                   </div>
                               </div>
                             {% endcapture %}

                             {% if show_color_swatches and color_swatch_options contains option_name %}
                               {{ color_swatch }}
                             {% else %}
                               {{ regular_swatch }}
                             {% endif %}
                           {% endfor %}
                         </div>
                       {% endfor %}
                     </div>
                   {%- else -%}
                     <div class="product__variants-select no-js-hidden" data-section="{{ section.id }}" data-url="{{ product.url }}">
                       {%- for option in product.options_with_values -%}
                         <div class="product-form__input product-form__input--dropdown product__section--element">
                           <label class="form__label" for="Option-{{ section.id }}-{{ forloop.index0 }}">
                             {{ option.name }}
                           </label>
                           <div class="select">
                             <select id="Option-{{ section.id }}-{{ forloop.index0 }}"
                               class="js-variant-selector styled-select"
                               name="options[{{ option.name | escape }}]"
                               form="product-form-{{ section.id }}"
                             >
                               {%- for value in option.values -%}
                                 <option value="{{ value | escape }}" {% if option.selected_value == value %}selected="selected"{% endif %}>
                                   {{ value }}
                                 </option>
                               {%- endfor -%}
                             </select>
                           </div>
                         </div>
                       {%- endfor -%}
                     </div>
                   {%- endif -%}
                  {%- endunless -%}

                  <noscript class="product__variants-select product-form__noscript-wrapper-{{ section.id }}">
                    <div class="product-form__input product-form__input--dropdown{% if product.has_only_default_variant %} hidden{% endif %}">
                      <label class="form__label" for="Variants-{{ section.id }}">{{ 'products.product.select_option' | t }}</label>
                      <div class="select">
                        <select name="id" id="Variants-{{ section.id }}" class="styled-select">
                          {%- for variant in product.variants -%}
                            <option
                              {% if variant == product.selected_or_first_available_variant %}selected="selected"{% endif %}
                              {% if variant.available == false %}disabled{% endif %}
                              value="{{ variant.id }}"
                            >
                              {{ variant.title }}
                              {%- if variant.available == false %} - {{ 'products.product.sold_out' | t }}{% endif %}
                              - {{ variant.price | money | strip_html }}
                            </option>
                          {%- endfor -%}
                        </select>
                      </div>
                    </div>
                  </noscript>

                  <input class="formVariantId" name="" type="hidden" value="{{ product.selected_or_first_available_variant.id }}">
                {% endform %}

                <!-- Quantity -->
                <div class="product__section--qty qty-selection product__section--element" data-product-qty {{ block.shopify_attributes }}>
                  <label for="qty-{{ product.id }}" class="h5">{{ 'products.product.quantity' | t }}</label>
                  <div class="product__quantity--wrapper">
                    <button class="down quantity-control-down" type="button">
                      <span class="visuallyhidden">{{ 'products.product.decrease' | t: product: product.title | escape }}</span>
                    -</button>
                      <input id="qty-{{ product.id }}" min="1" type="text" name="quantity" class="formQty quantity" value="1" />
                    <button class="up quantity-control-up" type="button">
                      <span class="visuallyhidden">{{ 'products.product.increase' | t: product: product.title | escape }}</span>
                    +</button>
                  </div>
                </div>

                <!-- Product buttons -->
                <div class="product__section--buttons product-add product__section--element" {{ block.shopify_attributes }}>
                  {%- assign product_form_id = 'product-form-buttons-' | append: section.id -%}
                  {% form 'product', product,
                     id: product_form_id,
                     class: "product__form-buttons js-prod-form-submit relative",
                     data-product-id: product.id %}

                    {%- liquid
                      assign call_to_action = 'products.product.add_to_cart' | t
                      unless current_variant.available
                        assign call_to_action = 'products.product.sold_out' | t
                      endunless
                      assign product_form_id = 'product-form-' | append: section.id
                    -%}

                    <input class="formVariantId" name="id" type="hidden" value="{{ product.selected_or_first_available_variant.id }}">
                    <input class="formQty" type="hidden" name="quantity" value="1" />
                    <div class="note note-success js-added-msg" style="display: none">
                      <b>{{ 'products.product.added' | t }}</b>&nbsp;&nbsp;&nbsp;<a class="underline" href="{{ routes.cart_url }}">{{ 'products.product.view_cart' | t }}</a> {{ 'products.product.or' | t }} <a class="underline" href="{{ routes.all_products_collection_url }}">{{ 'products.product.continue' | t }}</a>.
                    </div>
                    <div class="note note-error js-error-msg" style="display: none">
                      <b>{{ 'cart.general.cart_error' | t }}</b>&nbsp;&nbsp;&nbsp;{{ 'cart.general.update_qty_error' | t }}
                    </div>

                    <input id="addToCart" type="submit" name="button" class="add clearfix AddtoCart js-ajax-submit {% if settings.show_payment_button and product.selling_plan_groups.size == 0 %} secondary-button{% endif %}" value="{{ call_to_action }}" {% unless current_variant.available %}disabled{% endunless %} />

                    {% if settings.show_payment_button %}
                      {% if product.selected_or_first_available_variant.available %}
                        <div class="shopify-payment-button">
                        </div>
                      {%- endif -%}
                    {% endif %}
                  {%-  endform -%}
                </div>
                <div class="product-single__store-availability-container product__section--element" data-store-availability-container></div>
              </div>
            </div>
        </div>
      </div>

      <!-- Add variant data for JavaScript -->
      <script id="product-variants-data-{{ section.id }}" type="application/json">
      {
        "variants": [
          {% for variant in product.variants %}
          {
            "id": {{ variant.id }},
            "available": {{ variant.available }},
            "option1": "{{ variant.option1 | escape }}",
            "option2": "{{ variant.option2 | escape }}",
            "option3": "{{ variant.option3 | escape }}"
          }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ],
        "colorOptions": {{ settings.swatch_option_names | replace: ' ,', ',' | replace: ', ', ',' | split: ',' | downcase | json }},
        "sizeOptions": ["size", "sizes"]
      }
      </script>

      <script>
      // Enhanced swatch functionality for quick drawer
      document.addEventListener('DOMContentLoaded', function() {
        const productData = document.getElementById('product-variants-data-{{ section.id }}');
        if (!productData) return;
        
        const data = JSON.parse(productData.textContent);
        const variants = data.variants;
        const colorOptions = data.colorOptions;
        const sizeOptions = data.sizeOptions;
        
        // Function to update selected class for regular swatches
        function updateSelectedClass() {
          const regularSwatches = document.querySelectorAll('.js-quickview-wrapper .swatches__swatch--regular');
          
          regularSwatches.forEach(function(swatch) {
            const input = swatch.querySelector('.swatches__form--input');
            if (input && input.checked) {
              swatch.classList.add('selected-cs');
            } else {
              swatch.classList.remove('selected-cs');
            }
          });
        }
        
        // Function to check if all colors are sold out for a selected size
        function checkSizeAvailability(selectedSize) {
          const availableColors = new Set();
          const totalColors = new Set();
          
          variants.forEach(function(variant) {
            if (variant.option1 === selectedSize || variant.option2 === selectedSize || variant.option3 === selectedSize) {
              [variant.option1, variant.option2, variant.option3].forEach(function(optionValue) {
                if (optionValue && optionValue !== selectedSize) {
                  totalColors.add(optionValue);
                  if (variant.available) {
                    availableColors.add(optionValue);
                  }
                }
              });
            }
          });
          
          return totalColors.size > 0 && availableColors.size === 0;
        }
        
        // Function to check if a selected color is available in a specific size
        function checkColorAvailabilityInSize(selectedColor, sizeValue) {
          let colorAvailableInSize = false;
          
          variants.forEach(function(variant) {
            const hasColor = variant.option1 === selectedColor || variant.option2 === selectedColor || variant.option3 === selectedColor;
            const hasSize = variant.option1 === sizeValue || variant.option2 === sizeValue || variant.option3 === sizeValue;
            
            if (hasColor && hasSize && variant.available) {
              colorAvailableInSize = true;
            }
          });
          
          return colorAvailableInSize;
        }
        
        // Function to update size swatch styling
        function updateSizeSwatches() {
          const sizeContainers = document.querySelectorAll('.js-quickview-wrapper .js-variant-selector');
          
          sizeContainers.forEach(function(container) {
            const optionName = container.getAttribute('data-option-name');
            
            if (sizeOptions.includes(optionName)) {
              const swatches = container.querySelectorAll('.js-swatch-element');
              
              swatches.forEach(function(swatch) {
                const optionValue = swatch.getAttribute('data-option-value');
                const allColorsSoldOut = checkSizeAvailability(optionValue);
                
                if (allColorsSoldOut) {
                  swatch.classList.add('size-strike-on');
                } else {
                  swatch.classList.remove('size-strike-on');
                }
              });
            }
          });
        }
        
        // Function to update size swatches based on selected color
        function updateSizeSwatchesForColor() {
          const colorContainers = document.querySelectorAll('.js-quickview-wrapper .js-variant-selector');
          let selectedColor = null;
          
          colorContainers.forEach(function(container) {
            const optionName = container.getAttribute('data-option-name');
            if (colorOptions.includes(optionName)) {
              const checkedInput = container.querySelector('.swatches__form--input:checked');
              if (checkedInput) {
                selectedColor = checkedInput.value;
              }
            }
          });
          
          if (!selectedColor) {
            updateSizeSwatches();
            return;
          }
          
          const sizeContainers = document.querySelectorAll('.js-quickview-wrapper .js-variant-selector');
          
          sizeContainers.forEach(function(container) {
            const optionName = container.getAttribute('data-option-name');
            
            if (sizeOptions.includes(optionName)) {
              const swatches = container.querySelectorAll('.js-swatch-element');
              
              swatches.forEach(function(swatch) {
                const sizeValue = swatch.getAttribute('data-option-value');
                const colorAvailableInSize = checkColorAvailabilityInSize(selectedColor, sizeValue);
                const allColorsSoldOut = checkSizeAvailability(sizeValue);
                
                if (allColorsSoldOut || !colorAvailableInSize) {
                  swatch.classList.add('size-strike-on');
                } else {
                  swatch.classList.remove('size-strike-on');
                }
              });
            }
          });
        }
        
        // Function to filter color swatches based on selected size
        function filterColorSwatches() {
          const sizeContainers = document.querySelectorAll('.js-quickview-wrapper .js-variant-selector');
          let selectedSize = null;
          
          sizeContainers.forEach(function(container) {
            const optionName = container.getAttribute('data-option-name');
            if (sizeOptions.includes(optionName)) {
              const checkedInput = container.querySelector('.swatches__form--input:checked');
              if (checkedInput) {
                selectedSize = checkedInput.value;
              }
            }
          });
          
          if (!selectedSize) return;
          
          const availableColors = new Set();
          const completelySoldOutColors = new Set();
          const allColorsForSize = new Set();
          
          variants.forEach(function(variant) {
            if (variant.option1 === selectedSize || variant.option2 === selectedSize || variant.option3 === selectedSize) {
              [variant.option1, variant.option2, variant.option3].forEach(function(optionValue) {
                if (optionValue && optionValue !== selectedSize) {
                  allColorsForSize.add(optionValue);
                  if (variant.available) {
                    availableColors.add(optionValue);
                  }
                }
              });
            }
          });
          
          allColorsForSize.forEach(function(color) {
            if (!availableColors.has(color)) {
              completelySoldOutColors.add(color);
            }
          });
          
          sizeContainers.forEach(function(container) {
            const optionName = container.getAttribute('data-option-name');
            
            if (colorOptions.includes(optionName)) {
              const swatches = container.querySelectorAll('.js-swatch-element');
              
              swatches.forEach(function(swatch) {
                const optionValue = swatch.getAttribute('data-option-value');
                
                if (allColorsForSize.has(optionValue)) {
                  swatch.classList.remove('swatch-hidden');
                  
                  if (completelySoldOutColors.has(optionValue)) {
                    swatch.classList.add('swatch-sold-out');
                    swatch.classList.add('soldout');
                  } else {
                    swatch.classList.remove('swatch-sold-out');
                    swatch.classList.remove('soldout');
                  }
                } else {
                  swatch.classList.add('swatch-hidden');
                  const input = swatch.querySelector('.swatches__form--input');
                  if (input && input.checked) {
                    input.checked = false;
                  }
                }
              });
            }
          });
        }
        
        // Add event listeners to all inputs within the quick drawer
        const allContainers = document.querySelectorAll('.js-quickview-wrapper .js-variant-selector');
        allContainers.forEach(function(container) {
          const optionName = container.getAttribute('data-option-name');
          const inputs = container.querySelectorAll('.swatches__form--input');
          
          inputs.forEach(function(input) {
            input.addEventListener('change', function() {
              // Update selected option display
              const optionPosition = this.getAttribute('data-position');
              const selectedSpan = document.getElementById('selected-option-' + optionPosition);
              if (selectedSpan) {
                selectedSpan.textContent = this.value;
              }
              
              // Update selected class for regular swatches
              updateSelectedClass();
              
              // If this is a size option, filter color swatches
              if (sizeOptions.includes(optionName)) {
                filterColorSwatches();
              }
              
              // If this is a color option, update size swatches
              if (colorOptions.includes(optionName)) {
                updateSizeSwatchesForColor();
              }
            });
          });
        });
        
        // Initial setup on page load
        updateSizeSwatches();
          filterColorSwatches();
  updateSelectedClass();
  updateSizeSwatchesForColor(); // NEW: Initial color-based size filtering
});
</script>