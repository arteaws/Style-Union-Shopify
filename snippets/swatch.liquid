<style>
.color_dflex {
    display: flex;
    flex-direction: column;
    align-items: center;
}
.swatches__color-name{
  font-size: 12px;
}
.swatch-hidden {
    display: none !important;
}
.swatch-sold-out {
    opacity: 0.5;
} 
#addToCart[type="submit"][value="Sold Out"] {
    display: none;
} 
span.price__badge.price__badge--sold-out {
    display: none;
}  
.swatch-sold-out .swatches__form--label {
    cursor: not-allowed;
}
/* Custom swatch styles */
.swatches__swatch--color .swatches__form--label {
    width: 50px;
    height: 50px;
    /* border-radius: 50%; */
    border: 1px solid #ccc;
    display: block;
    cursor: pointer;
    position: relative;
    transition: all 0.3s ease;
}
.swatches__swatch--color .swatches__form--input:checked + .swatches__form--label {
    border-color: #000;
    transform: scale(1.1);
}
.swatches__swatch--regular .swatches__form--label {
    padding: 8px 16px;
    border: 1px solid #ccc;
    background: #fff;
    cursor: pointer;
    transition: all 0.3s ease;
}
.swatches__swatch--regular .swatches__form--input:checked + .swatches__form--label {
    background: #000;
    color: #fff;
}
.swatches__form--input {
    display: none;
}
.swatches__sold-out--image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
}
.swatches__container {
    margin-bottom: 20px;
}
.swatches__option-name {
    font-weight: bold;
    margin-bottom: 10px;
}
.swatch-element {
    display: inline-block;
    margin: 5px;
    vertical-align: top;
}
</style>

{%- liquid
  assign option_name = option.name | downcase
  
  comment
    Define color and size options directly in code
  endcomment
  assign color_options = "color,colour,colors,colours" | split: ","
  assign size_options = "size,sizes" | split: ","
  
  comment
    Check if current option is color or size
  endcomment
  assign is_color_option = false
  assign is_size_option = false
  
  for color_opt in color_options
    if option_name contains color_opt
      assign is_color_option = true
      break
    endif
  endfor
  
  for size_opt in size_options
    if option_name contains size_opt
      assign is_size_option = true
      break
    endif
  endfor
  
  assign current_option = "option" | append: option.position
  assign other_options = "option1 option2 option3" | remove: current_option | strip | split: " "
-%}

<div class="swatches__container js-variant-selector product__section--element" data-option-index="{{ option.position }}" data-option-name="{{ option.name | downcase }}" data-other-options='{{ other_options | json }}'>

  {% comment %} Size Chart Button (optional) {% endcomment %}
  {% if is_size_option and show_size_chart %}
    <div class="size-chart">
      <button
        class="button-as-link js-modal-open"
        type="button"
        name="button"
        aria-label="Open popup"
        data-wau-modal-target="product-modal--{{ section.id }}--{{ forloop.index }}">
        Size Chart
      </button>

      <div data-wau-modal-content="product-modal--{{ section.id }}--{{ forloop.index }}" style="display: none;">
        <div class="rte">
          {% if size_chart_page %}
            {{ size_chart_page.content }}
          {% else %}
            <p>Size chart content goes here.</p>
          {% endif %}
        </div>
      </div>
    </div>
  {% endif %}

  <p class="swatches__option-name">{{ option.name }}: {% for value in option.values %}{% if option.selected_value == value %}<span id="selected-option-{{ option.position }}" class="swatches__option-value">{{ value }}</span>{% endif %}{% endfor %}</p>

  {% for value in option.values %}
    {%- liquid
      comment
        Create color mapping for common colors
      endcomment
      assign color_map = "red:#FF0000,blue:#0000FF,green:#008000,black:#000000,white:#FFFFFF,yellow:#FFFF00,pink:#FFC0CB,purple:#800080,orange:#FFA500,brown:#A52A2A,gray:#808080,grey:#808080,navy:#000080,beige:#F5F5DC,cream:#FFFDD0,tan:#D2B48C,khaki:#F0E68C,silver:#C0C0C0,gold:#FFD700,maroon:#800000,olive:#808000,lime:#00FF00,aqua:#00FFFF,teal:#008080,fuchsia:#FF00FF" | split: ","
      
      assign css_color = "#ccc"
      assign value_handle = value | handle
      
      comment
        Try to match color from mapping
      endcomment
      for color_pair in color_map
        assign color_parts = color_pair | split: ":"
        if color_parts[0] == value_handle
          assign css_color = color_parts[1]
          break
        endif
      endfor
      
      assign available = false
      assign variant_image_url = nil
    -%}

    {% comment %} Check Availability {% endcomment %}
    {%- liquid
      assign available = false
      assign variant_exists = false

      for variant in product.variants
        unless variant[current_option] == value
          continue
        endunless

        unless variant[other_options[0]] == current_variant[other_options[0]]
          continue
        endunless

        unless variant[other_options[1]] == current_variant[other_options[1]]
          continue
        endunless

        assign variant_exists = true
        if variant.available
          assign available = true
        endif
      endfor
    -%}

    {% comment %} Get Variant Image {% endcomment %}
    {%- liquid
      for variant in product.variants
        unless variant[current_option] == value
          continue
        endunless

        unless variant[other_options[0]] == current_variant[other_options[0]]
          continue
        endunless

        unless variant[other_options[1]] == current_variant[other_options[1]]
          continue
        endunless

        if variant.image
          assign variant_image_url = variant.image | image_url: width: 100, height: 100, crop: 'center'
        endif
        break
      endfor

      assign checked = ""
      if current_variant[current_option] == value
        assign checked = 'checked="checked"'
      endif
      
      comment
        Check for custom swatch images in assets
      endcomment
      assign swatch_image_name = value_handle | append: '.png'
      assign swatch_img = nil
      
      comment
        Try to get swatch image from assets
      endcomment
      capture swatch_test
        echo swatch_image_name | asset_url
      endcapture
      
      if swatch_test contains swatch_image_name
        assign swatch_img = swatch_image_name | asset_url
      endif
    -%}

    {% capture radio_button %}
      <input type="radio" id="{{ section.id }}-{{ option.name }}-{{ forloop.index0 }}"
          class="swatches__form--input"
          name="{{ option_name }}"
          value="{{ value | escape }}"
          form="product-form-{{ section.id }}"
          data-position="{{ option.position }}"
          data-option-value="{{ value | escape }}"
          {{ checked }}>
    {% endcapture %}

    {% capture sold_out_image %}
      <div class="swatches__sold-out--overlay" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255,255,255,0.8); display: flex; align-items: center; justify-content: center; font-size: 12px; color: #666;">
        âœ•
      </div>
    {% endcapture %}

    {% capture regular_swatch %}
      <div class="swatches__swatch--regular swatch-element {% unless available %}soldout{% endunless %} js-swatch-element" data-option-value="{{ value | escape }}" data-option-position="{{ option.position }}" data-available="{{ available }}">
        {{ radio_button }}
        <label class="swatches__form--label" for="{{ section.id }}-{{ option.name }}-{{ forloop.index0 }}" tabindex="0">
          {{ value }}
          {% unless available %}{{ sold_out_image }}{% endunless %}
        </label>
      </div>
    {% endcapture %}

    {% capture color_swatch %}
      <div class="swatches__swatch--color swatch-element color {% unless available %}soldout{% endunless %} js-swatch-element parent-dflex" data-option-value="{{ value | escape }}" data-option-position="{{ option.position }}" data-available="{{ available }}">
        <div class="color_dflex">
          {{ radio_button }}
          {% if variant_image_url %}
            <!-- Show variant image if available -->
            <label class="swatches__form--label"
              for="{{ section.id }}-{{ option.name }}-{{ forloop.index0 }}"
              tabindex="0"
              style="background-image: url({{ variant_image_url }}); background-position: center center; background-size: cover; background-repeat: no-repeat;">
              {% unless available %}{{ sold_out_image }}{% endunless %}
            </label>
          {% elsif swatch_img %}
            <!-- Show custom swatch image if available -->
            <label class="swatches__form--label"
              for="{{ section.id }}-{{ option.name }}-{{ forloop.index0 }}"
              tabindex="0"
              style="background-image: url({{ swatch_img }}); background-position: center center; background-size: cover; background-repeat: no-repeat;">
              {% unless available %}{{ sold_out_image }}{% endunless %}
            </label>
          {% else %}
            <!-- Fallback to color background -->
            <label class="swatches__form--label"
              for="{{ section.id }}-{{ option.name }}-{{ forloop.index0 }}"
              tabindex="0"
              style="background-color: {{ css_color }};">
              {% unless available %}{{ sold_out_image }}{% endunless %}
            </label>
          {% endif %}
          <span class="swatches__color-name">{{ value | truncatewords: 1, '' }}</span>
        </div>
      </div>
    {% endcapture %}

    {% if is_color_option %}
      {{ color_swatch }}
    {% else %}
      {{ regular_swatch }}
    {% endif %}
  {% endfor %}
</div>

<!-- Add variant data for JavaScript -->
{% if option.position == 1 %}
<script id="product-variants-data-{{ section.id }}" type="application/json">
{
  "variants": [
    {% for variant in product.variants %}
    {
      "id": {{ variant.id }},
      "available": {{ variant.available }},
      "option1": "{{ variant.option1 | escape }}",
      "option2": "{{ variant.option2 | escape }}",
      "option3": "{{ variant.option3 | escape }}"
    }{% unless forloop.last %},{% endunless %}
    {% endfor %}
  ]
}
</script>
{% endif %}

<script>
document.addEventListener('DOMContentLoaded', function() {
  const productData = document.getElementById('product-variants-data-{{ section.id }}');
  if (!productData) return;
  
  const data = JSON.parse(productData.textContent);
  const variants = data.variants;
  
  // Define options directly in JavaScript
  const colorOptions = ['color', 'colour', 'colors', 'colours'];
  const sizeOptions = ['size', 'sizes'];
  
  // Helper function to check if option name contains any of the specified terms
  function isOptionType(optionName, optionTypes) {
    return optionTypes.some(type => optionName.includes(type));
  }
  
  // Function to filter color swatches based on selected size
  function filterColorSwatches() {
    // Get currently selected size
    const sizeContainers = document.querySelectorAll('.js-variant-selector');
    let selectedSize = null;
    
    sizeContainers.forEach(function(container) {
      const optionName = container.getAttribute('data-option-name');
      if (isOptionType(optionName, sizeOptions)) {
        const checkedInput = container.querySelector('.swatches__form--input:checked');
        if (checkedInput) {
          selectedSize = checkedInput.value;
        }
      }
    });
    
    // If no size is selected, show all colors
    if (!selectedSize) return;
    
    // Get all colors for the selected size
    const availableColors = new Set();
    const soldOutColors = new Set();
    
    variants.forEach(function(variant) {
      if (variant.option1 === selectedSize || variant.option2 === selectedSize || variant.option3 === selectedSize) {
        // Add all option values for this variant to available colors
        [variant.option1, variant.option2, variant.option3].forEach(function(optionValue) {
          if (optionValue && optionValue !== selectedSize) {
            availableColors.add(optionValue);
            if (!variant.available) {
              soldOutColors.add(optionValue);
            }
          }
        });
      }
    });
    
    // Show/hide color swatches
    sizeContainers.forEach(function(container) {
      const optionName = container.getAttribute('data-option-name');
      
      // Only filter color containers, not size containers
      if (isOptionType(optionName, colorOptions)) {
        const swatches = container.querySelectorAll('.js-swatch-element');
        
        swatches.forEach(function(swatch) {
          const optionValue = swatch.getAttribute('data-option-value');
          const isAvailable = swatch.getAttribute('data-available') === 'true';
          
          if (availableColors.has(optionValue)) {
            swatch.classList.remove('swatch-hidden');
            
            // Update sold out status
            if (soldOutColors.has(optionValue) || !isAvailable) {
              swatch.classList.add('swatch-sold-out');
              swatch.classList.add('soldout');
            } else {
              swatch.classList.remove('swatch-sold-out');
              swatch.classList.remove('soldout');
            }
          } else {
            swatch.classList.add('swatch-hidden');
            // Uncheck hidden color options
            const input = swatch.querySelector('.swatches__form--input');
            if (input && input.checked) {
              input.checked = false;
            }
          }
        });
      }
    });
  }
  
  // Add event listeners to all option inputs
  const allContainers = document.querySelectorAll('.js-variant-selector');
  allContainers.forEach(function(container) {
    const optionName = container.getAttribute('data-option-name');
    const inputs = container.querySelectorAll('.swatches__form--input');
    
    inputs.forEach(function(input) {
      input.addEventListener('change', function() {
        // Update selected option display
        const optionPosition = this.getAttribute('data-position');
        const selectedSpan = document.getElementById('selected-option-' + optionPosition);
        if (selectedSpan) {
          selectedSpan.textContent = this.value;
        }
        
        // Filter color swatches if this is a size option
        if (isOptionType(optionName, sizeOptions)) {
          filterColorSwatches();
        }
      });
    });
  });
  
  // Initial filter on page load
  filterColorSwatches();
});
</script>