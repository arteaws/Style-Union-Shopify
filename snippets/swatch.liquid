<style>
.color_dflex {
    display: flex;
    flex-direction: column;
    align-items: center;
}
.swatches__color-name{
  font-size: 12px;
}
.swatch-hidden {
    display: none !important;
}
</style>

{%- liquid
  assign option_name = option.name | downcase
  assign color_swatch_options = settings.swatch_option_names | replace: ' ,', ',' | replace: ', ', ',' | split: ',' | downcase
  assign current_option = "option" | append: option.position
  assign other_options = "option1 option2 option3" | remove: current_option | strip | split: " "
  assign size_swatches = "size, sizes" | split: ", "
-%}

<div class="swatches__container js-variant-selector product__section--element" data-option-index="{{ option.position }}" data-other-options='{{ other_options | json }}'>

  {% unless template == 'product.quick' %}
    {% if show_size_chart and size_swatches contains option_name %}
      <div class="size-chart">
        <button
          class="button-as-link js-modal-open"
          type="button"
          name="button"
          aria-label="Open popup"
          data-wau-modal-target="product-modal--{{ section.id }}--{{ forloop.index }}">
          {{ size_chart_label }}
        </button>

        <!-- modal content -->
        <div data-wau-modal-content="product-modal--{{ section.id }}--{{ forloop.index }}" style="display: none;">
          <div class="rte">
            {{ size_chart_page.content }}
          </div><!-- /.rte -->
        </div>
      </div>
    {% endif %}
  {% endunless %}

  <p class="swatches__option-name">{{ option.name }}: {% for value in option.values %}{% if option.selected_value == value %}<span id="selected-option-{{ option.position }}" class="swatches__option-value">{{ value }}</span>{% endif %}{% endfor %}</p>

  {% for value in option.values %}
    {%- liquid
      assign image_url = value | handle | append: '.png' | file_url
      assign css_color = value | split: ' ' | last | handle
      assign available = false
      assign swatch_image_url = nil
      assign variant_image_url = nil
      
      if value.swatch.image
        assign swatch_image_url = value.swatch.image | image_url: width: 50
      endif
      if value.swatch.color and color_swatch_style == 'swatch'
        assign css_color = value.swatch.color
      endif
    -%}

    <!-- Build variant combinations for this option value -->
    {%- liquid
      assign variant_combinations = ""
      assign available = false

      for variant in product.variants
        unless variant[current_option] == value
          continue
        endunless

        if variant.available
          assign available = true
        endif

        assign combination = ""
        if variant.option1
          assign combination = combination | append: variant.option1
        endif
        if variant.option2
          assign combination = combination | append: "|" | append: variant.option2
        endif
        if variant.option3
          assign combination = combination | append: "|" | append: variant.option3
        endif
        
        if variant_combinations == ""
          assign variant_combinations = combination
        else
          assign variant_combinations = variant_combinations | append: "," | append: combination
        endif
      endfor
    -%}

    <!-- Building Variant Image -->
    {%- liquid
      for variant in product.variants
        unless variant[current_option] == value
          continue
        endunless

        unless variant[other_options[0]] == current_variant[other_options[0]]
          continue
        endunless

        unless variant[other_options[1]] == current_variant[other_options[1]]
          continue
        endunless

        if variant.image
          assign variant_image_url = variant.image | image_url: width: 100, height: 100, crop: 'center'
        endif
      endfor

      assign checked = ""
      if current_variant[current_option] == value
        assign checked = 'checked="checked"'
      endif

      assign swatch_img = null
      assign swatch_color_name = value | handle | append: '.png'

      if images[swatch_color_name] != blank
        assign swatch_img = swatch_color_name | file_url
      endif
    -%}

    {% capture radio_button %}
      <input type="radio" id="{{ section.id }}-{{ option.name }}-{{ forloop.index0 }}"
          class="swatches__form--input"
          name="{{ option_name }}"
          value="{{ value | escape }}"
          form="product-form-{{ section.id }}"
          data-position="{{ option.position }}"
          data-combinations="{{ variant_combinations }}"
          {{ checked }}>
    {% endcapture %}

    {% capture sold_out_image %}
      <img class="swatches__sold-out--image crossed-out" src="{{ 'soldout.png' | asset_url }}" alt="Sold out image" />
    {% endcapture %}

    {% capture regular_swatch %}
      <div class="swatches__swatch--regular swatch-element {% unless available %}soldout{% endunless %} js-swatch-element" data-option-value="{{ value | escape }}" data-option-position="{{ option.position }}">
        {{ radio_button }}
        <label class="swatches__form--label" for="{{ section.id }}-{{ option.name }}-{{ forloop.index0 }}" tabindex="0">
          {{ value }}
          {{ sold_out_image }}
        </label>
      </div>
    {% endcapture %}

    {% capture color_swatch %}
      <div class="swatches__swatch--color swatch-element color swatches__shape--{{ color_swatch_shape }} {% unless available %}soldout{% endunless %} js-swatch-element parent-dflex" data-option-value="{{ value | escape }}" data-option-position="{{ option.position }}">
        <div class="color_dflex">
        {{ radio_button }}
        {% if variant_image_url %}
          <!-- Show variant image if available -->
          <label class="swatches__form--label"
            for="{{ section.id }}-{{ option.name }}-{{ forloop.index0 }}"
            tabindex="0"
            style="background-image: url({{ variant_image_url }}); background-position: center center; background-size: cover;">
            {{ sold_out_image }}
          </label>
          <span class="swatches__color-name">{{ value | truncatewords:1 }}</span>

        {% else %}
          <!-- Fallback to color swatch if no variant image -->
          <label class="swatches__form--label"
            for="{{ section.id }}-{{ option.name }}-{{ forloop.index0 }}"
            tabindex="0"
            style="background-color: {{ css_color }};
            {% unless color_swatch_style == 'default-color' %}
              background-image: url({% if color_swatch_style == 'custom-image' %}{{ image_url }}{% elsif color_swatch_style == 'variant-image' %}{{ variant_image_url }}{% elsif color_swatch_style == 'swatch' %}{{ swatch_image_url }}{% endif %}); background-position: center center; background-size: 50px;
            {% endunless %}">
            {{ sold_out_image }}
          </label>
          <span class="swatches__color-name">{{ value }}</span>
        {% endif %}
          </div>
      </div>
    {% endcapture %}

    {% if show_color_swatches and color_swatch_options contains option_name %}
      {{ color_swatch }}
    {% else %}
      {{ regular_swatch }}
    {% endif %}
  {% endfor %}
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const variantSelectors = document.querySelectorAll('.js-variant-selector');
  
  variantSelectors.forEach(function(container) {
    const swatchInputs = container.querySelectorAll('.swatches__form--input');
    const currentOptionIndex = container.getAttribute('data-option-index');
    
    // Function to filter swatches based on current selection
    function filterSwatches() {
      // Get currently selected values for all options
      const selectedValues = {};
      
      // Get all variant selector containers
      const allContainers = document.querySelectorAll('.js-variant-selector');
      allContainers.forEach(function(otherContainer) {
        const checkedInput = otherContainer.querySelector('.swatches__form--input:checked');
        if (checkedInput) {
          const position = checkedInput.getAttribute('data-position');
          selectedValues[position] = checkedInput.value;
        }
      });
      
      // Filter swatches in other containers
      allContainers.forEach(function(otherContainer) {
        const otherOptionIndex = otherContainer.getAttribute('data-option-index');
        if (otherOptionIndex === currentOptionIndex) return; // Skip current container
        
        const otherSwatches = otherContainer.querySelectorAll('.js-swatch-element');
        
        otherSwatches.forEach(function(swatch) {
          const input = swatch.querySelector('.swatches__form--input');
          const combinations = input.getAttribute('data-combinations');
          const optionValue = swatch.getAttribute('data-option-value');
          const optionPosition = swatch.getAttribute('data-option-position');
          
          let shouldShow = false;
          
          if (combinations) {
            const combinationArray = combinations.split(',');
            
            combinationArray.forEach(function(combination) {
              const options = combination.split('|');
              let matches = true;
              
              // Check if this combination matches current selections
              Object.keys(selectedValues).forEach(function(position) {
                const selectedValue = selectedValues[position];
                const optionIndex = parseInt(position) - 1;
                
                if (options[optionIndex] && options[optionIndex] !== selectedValue) {
                  matches = false;
                }
              });
              
              if (matches) {
                shouldShow = true;
              }
            });
          } else {
            shouldShow = true; // Show if no combinations data
          }
          
          if (shouldShow) {
            swatch.classList.remove('swatch-hidden');
          } else {
            swatch.classList.add('swatch-hidden');
          }
        });
      });
    }
    
    // Add event listeners to all swatch inputs
    swatchInputs.forEach(function(input) {
      input.addEventListener('change', function() {
        // Update selected option display
        const optionPosition = this.getAttribute('data-position');
        const selectedSpan = document.getElementById('selected-option-' + optionPosition);
        if (selectedSpan) {
          selectedSpan.textContent = this.value;
        }
        
        // Filter other swatches
        setTimeout(filterSwatches, 10); // Small delay to ensure DOM is updated
      });
    });
    
    // Initial filter on page load
    filterSwatches();
  });
});
</script>