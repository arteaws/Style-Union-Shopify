<style>
.color_dflex {
    display: flex;
    flex-direction: column;
    align-items: center;
}
.swatches__color-name{
  font-size: 12px;
}
.swatch-hidden {
    display: none !important;
}
 /* .swatch-sold-out {
    opacity: 0.5;
}  */
  #addToCart[type="submit"][value="Sold Out"] {
    display: none;
} 
  span.price__badge.price__badge--sold-out {
    display: none;
}  
.swatch-sold-out .swatches__form--label {
    cursor: not-allowed;
}
</style>

{%- liquid
  assign option_name = option.name | downcase
  assign color_swatch_options = settings.swatch_option_names | replace: ' ,', ',' | replace: ', ', ',' | split: ',' | downcase
  assign current_option = "option" | append: option.position
  assign other_options = "option1 option2 option3" | remove: current_option | strip | split: " "
  assign size_swatches = "size, sizes" | split: ", "
-%}

<div class="swatches__container js-variant-selector product__section--element" data-option-index="{{ option.position }}" data-option-name="{{ option.name | downcase }}" data-other-options='{{ other_options | json }}'>

  {% unless template == 'product.quick' %}
    {% if show_size_chart and size_swatches contains option_name %}
      <div class="size-chart">
        <button
          class="button-as-link js-modal-open"
          type="button"
          name="button"
          aria-label="Open popup"
          data-wau-modal-target="product-modal--{{ section.id }}--{{ forloop.index }}">
          {{ size_chart_label }}
        </button>

        <!-- modal content -->
        <div data-wau-modal-content="product-modal--{{ section.id }}--{{ forloop.index }}" style="display: none;">
          <div class="rte">
            {{ size_chart_page.content }}
          </div><!-- /.rte -->
        </div>
      </div>
    {% endif %}
  {% endunless %}

  <p class="swatches__option-name">{{ option.name }}: {% for value in option.values %}{% if option.selected_value == value %}<span id="selected-option-{{ option.position }}" class="swatches__option-value">{{ value }}</span>{% endif %}{% endfor %}</p>

  {% for value in option.values %}
    {%- liquid
      assign image_url = value | handle | append: '.png' | file_url
      assign css_color = value | split: ' ' | last | handle
      assign available = false
      assign swatch_image_url = nil
      assign variant_image_url = nil
      
      if value.swatch.image
        assign swatch_image_url = value.swatch.image | image_url: width: 50
      endif
      if value.swatch.color and color_swatch_style == 'swatch'
        assign css_color = value.swatch.color
      endif
    -%}

    <!-- Checking Availability - Show all variants regardless of availability -->
    {%- liquid
      assign available = false
      assign variant_exists = false

      for variant in product.variants
        unless variant[current_option] == value
          continue
        endunless

        unless variant[other_options[0]] == current_variant[other_options[0]]
          continue
        endunless

        unless variant[other_options[1]] == current_variant[other_options[1]]
          continue
        endunless

        assign variant_exists = true
        if variant.available
          assign available = true
        endif
      endfor
    -%}

    <!-- Building Variant Image -->
    {%- liquid
      for variant in product.variants
        unless variant[current_option] == value
          continue
        endunless

        unless variant[other_options[0]] == current_variant[other_options[0]]
          continue
        endunless

        unless variant[other_options[1]] == current_variant[other_options[1]]
          continue
        endunless

        if variant.image
          assign variant_image_url = variant.image | image_url: width: 100, height: 100, crop: 'center'
        endif
        break
      endfor

      assign checked = ""
      if current_variant[current_option] == value
        assign checked = 'checked="checked"'
      endif

      assign swatch_img = null
      assign swatch_color_name = value | handle | append: '.png'

      if images[swatch_color_name] != blank
        assign swatch_img = swatch_color_name | file_url
      endif
    -%}

    {% capture radio_button %}
      <input type="radio" id="{{ section.id }}-{{ option.name }}-{{ forloop.index0 }}"
          class="swatches__form--input"
          name="{{ option_name }}"
          value="{{ value | escape }}"
          form="product-form-{{ section.id }}"
          data-position="{{ option.position }}"
          data-option-value="{{ value | escape }}"
          {{ checked }}>
    {% endcapture %}

    {% capture sold_out_image %}
      <img class="swatches__sold-out--image crossed-out" src="{{ 'soldout.png' | asset_url }}" alt="Sold out image" />
    {% endcapture %}

    {% capture regular_swatch %}
      <div class="swatches__swatch--regular swatch-element {% unless available %}soldout{% endunless %} js-swatch-element" data-option-value="{{ value | escape }}" data-option-position="{{ option.position }}" data-available="{{ available }}">
        {{ radio_button }}
        <label class="swatches__form--label" for="{{ section.id }}-{{ option.name }}-{{ forloop.index0 }}" tabindex="0">
          {{ value }}
          {% unless available %}{{ sold_out_image }}{% endunless %}
        </label>
      </div>
    {% endcapture %}

    {% capture color_swatch %}
      <div class="swatches__swatch--color swatch-element color swatches__shape--{{ color_swatch_shape }} {% unless available %}soldout{% endunless %} js-swatch-element parent-dflex" data-option-value="{{ value | escape }}" data-option-position="{{ option.position }}" data-available="{{ available }}">
        <div class="color_dflex">
        {{ radio_button }}
        {% if variant_image_url %}
          <!-- Show variant image if available -->
          <label class="swatches__form--label old"
            for="{{ section.id }}-{{ option.name }}-{{ forloop.index0 }}"
            tabindex="0"
            style="background-image: url({{ variant_image_url }}); background-position: center center; background-size: cover;">
            {% unless available %}{{ sold_out_image }}{% endunless %}
          </label>
          <span class="swatches__color-name">{{ value | truncatewords:1 }}</span>

        {% else %}
          <!-- Fallback to color swatch if no variant image -->
          <label class="swatches__form--label new"
            for="{{ section.id }}-{{ option.name }}-{{ forloop.index0 }}"
            tabindex="0"
            style="background-image: url({{ variant_image_url }});
            {% unless color_swatch_style == 'default-color' %}
             {% comment %} background-image: url({% if color_swatch_style == 'custom-image' %}{{ image_url }}{% elsif color_swatch_style == 'variant-image' %}{{ variant_image_url }}{% elsif color_swatch_style == 'swatch' %}{{ swatch_image_url }}{% endif %}) {% endcomment %}; background-position: center center; background-size: 50px;
            {% endunless %}">
            {% unless available %}{{ sold_out_image }}{% endunless %}
          </label>
          <span class="swatches__color-name">{{ value }}</span>
        {% endif %}
          </div>
      </div>
    {% endcapture %}

    {% if show_color_swatches and color_swatch_options contains option_name %}
      {{ color_swatch }}
    {% else %}
      {{ regular_swatch }}
    {% endif %}
  {% endfor %}
</div>

<!-- Add variant data for JavaScript -->
{% if option.position == 1 %}
<script id="product-variants-data-{{ section.id }}" type="application/json">
{
  "variants": [
    {% for variant in product.variants %}
    {
      "id": {{ variant.id }},
      "available": {{ variant.available }},
      "option1": "{{ variant.option1 | escape }}",
      "option2": "{{ variant.option2 | escape }}",
      "option3": "{{ variant.option3 | escape }}"
    }{% unless forloop.last %},{% endunless %}
    {% endfor %}
  ],
  "colorOptions": {{ color_swatch_options | json }},
  "sizeOptions": {{ size_swatches | json }}
}
</script>
{% endif %}

<script>
document.addEventListener('DOMContentLoaded', function() {
  const productData = document.getElementById('product-variants-data-{{ section.id }}');
  if (!productData) return;
  
  const data = JSON.parse(productData.textContent);
  const variants = data.variants;
  const colorOptions = data.colorOptions;
  const sizeOptions = data.sizeOptions;
  
  // Function to filter color swatches based on selected size
  function filterColorSwatches() {
    // Get currently selected size
    const sizeContainers = document.querySelectorAll('.js-variant-selector');
    let selectedSize = null;
    
    sizeContainers.forEach(function(container) {
      const optionName = container.getAttribute('data-option-name');
      if (sizeOptions.includes(optionName)) {
        const checkedInput = container.querySelector('.swatches__form--input:checked');
        if (checkedInput) {
          selectedSize = checkedInput.value;
        }
      }
    });
    
    // If no size is selected, show all colors
    if (!selectedSize) return;
    
    // Get all colors for the selected size (regardless of availability)
    const availableColors = new Set();
    const soldOutColors = new Set();
    
    variants.forEach(function(variant) {
      if (variant.option1 === selectedSize || variant.option2 === selectedSize || variant.option3 === selectedSize) {
        // Add all option values for this variant to available colors
        if (variant.option1 && variant.option1 !== selectedSize) {
          availableColors.add(variant.option1);
          if (!variant.available) {
            soldOutColors.add(variant.option1);
          }
        }
        if (variant.option2 && variant.option2 !== selectedSize) {
          availableColors.add(variant.option2);
          if (!variant.available) {
            soldOutColors.add(variant.option2);
          }
        }
        if (variant.option3 && variant.option3 !== selectedSize) {
          availableColors.add(variant.option3);
          if (!variant.available) {
            soldOutColors.add(variant.option3);
          }
        }
      }
    });
    
    // Show/hide color swatches
    sizeContainers.forEach(function(container) {
      const optionName = container.getAttribute('data-option-name');
      
      // Only filter color containers, not size containers
      if (colorOptions.includes(optionName)) {
        const swatches = container.querySelectorAll('.js-swatch-element');
        
        swatches.forEach(function(swatch) {
          const optionValue = swatch.getAttribute('data-option-value');
          const isAvailable = swatch.getAttribute('data-available') === 'true';
          
          if (availableColors.has(optionValue)) {
            swatch.classList.remove('swatch-hidden');
            
            // Update sold out status with opacity
            if (soldOutColors.has(optionValue) || !isAvailable) {
              swatch.classList.add('swatch-sold-out');
              swatch.classList.add('soldout');
            } else {
              swatch.classList.remove('swatch-sold-out');
              swatch.classList.remove('soldout');
            }
          } else {
            swatch.classList.add('swatch-hidden');
            // Uncheck hidden color options
            const input = swatch.querySelector('.swatches__form--input');
            if (input && input.checked) {
              input.checked = false;
            }
          }
        });
      }
    });
  }
  
  // Add event listeners to size inputs only
  const sizeContainers = document.querySelectorAll('.js-variant-selector');
  sizeContainers.forEach(function(container) {
    const optionName = container.getAttribute('data-option-name');
    
    // Only add listeners to size options
    if (sizeOptions.includes(optionName)) {
      const sizeInputs = container.querySelectorAll('.swatches__form--input');
      
      sizeInputs.forEach(function(input) {
        input.addEventListener('change', function() {
          // Update selected option display
          const optionPosition = this.getAttribute('data-position');
          const selectedSpan = document.getElementById('selected-option-' + optionPosition);
          if (selectedSpan) {
            selectedSpan.textContent = this.value;
          }
          
          // Filter color swatches
          filterColorSwatches();
        });
      });
    } else if (colorOptions.includes(optionName)) {
      // Add listeners to color options just for updating display
      const colorInputs = container.querySelectorAll('.swatches__form--input');
      
      colorInputs.forEach(function(input) {
        input.addEventListener('change', function() {
          // Update selected option display
          const optionPosition = this.getAttribute('data-position');
          const selectedSpan = document.getElementById('selected-option-' + optionPosition);
          if (selectedSpan) {
            selectedSpan.textContent = this.value;
          }
        });
      });
    }
  });
  
  // Initial filter on page load
  filterColorSwatches();
});
</script>