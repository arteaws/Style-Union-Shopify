<style>
.swatch-sold-out .color_dflex {
    opacity: 0.6;
}  

.swatch-sold-out .color_dflex .swatches__form--label .crossed-out{
  display:block !important;
}  
  
.color_dflex {
    display: flex;
    flex-direction: column;
    align-items: center;
}
.swatches__color-name{
  font-size: 12px;
}
.swatch-hidden {
    display: none !important;
}

#addToCart[type="submit"][value="Sold Out"] {
    display: none;
} 
span.price__badge.price__badge--sold-out {
    display: none;
}  
.swatch-sold-out .swatches__form--label {
    cursor: not-allowed;
}

.swatches__sold-out--image.crossed-out {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 2;
    display: none;
}

.swatches__sold-out--image.crossed-out::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, transparent 46%, #000000 47%, #000000 53%, transparent 54%);
    z-index: 3;
    pointer-events: none;
}

.size-strike-on {
    position: relative;
    opacity: 0.6;
}
.custom-outer-sold-out{
   width:60px;
   height:40px;
} 
.custom-outer-sold-out .swatches__form--label {
  width: 100%;
  height: 100%;
}
.size-strike-on::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 68px;
  height: 1px;
  background-color: #000000;
  transform: translate(-50%, -50%) rotate(31deg);
  z-index: 2;
  pointer-events: none;
}
.size-strike-on.selected-cs::before {
background-color: #fff;
}
.size-strike-on .swatches__form--label {
    cursor: not-allowed;
}

.swatches__form--label {
    position: relative;
    display: inline-block;
}
</style>

{%- liquid
  assign option_name = option.name | downcase
  assign color_swatch_options = settings.swatch_option_names | replace: ' ,', ',' | replace: ', ', ',' | split: ',' | downcase
  assign current_option = "option" | append: option.position
  assign other_options = "option1 option2 option3" | remove: current_option | strip | split: " "
  assign size_swatches = "size, sizes" | split: ", "
-%}

<div class="swatches__container js-variant-selector product__section--element" data-option-index="{{ option.position }}" data-option-name="{{ option.name | downcase }}" data-other-options='{{ other_options | json }}'>

  {% unless template == 'product.quick' %}
    {% if show_size_chart and size_swatches contains option_name %}
      <div class="size-chart">
        <button
          class="button-as-link js-modal-open"
          type="button"
          name="button"
          aria-label="Open popup"
          data-wau-modal-target="product-modal--{{ section.id }}--{{ forloop.index }}">
          {{ size_chart_label }}
        </button>

        <!-- modal content -->
        <div data-wau-modal-content="product-modal--{{ section.id }}--{{ forloop.index }}" style="display: none;">
          <div class="rte">
            {{ size_chart_page.content }}
          </div><!-- /.rte -->
        </div>
      </div>
    {% endif %}
  {% endunless %}

  <p class="swatches__option-name">{{ option.name }}: {% for value in option.values %}{% if option.selected_value == value %}<span id="selected-option-{{ option.position }}" class="swatches__option-value">{{ value }}</span>{% endif %}{% endfor %}</p>

  {% for value in option.values %}
    {%- liquid
      assign image_url = value | handle | append: '.png' | file_url
      assign css_color = value | split: ' ' | last | handle
      assign available = false
      assign swatch_image_url = nil
      assign variant_image_url = nil
      
      if value.swatch.image
        assign swatch_image_url = value.swatch.image | image_url: width: 50
      endif
      if value.swatch.color and color_swatch_style == 'swatch'
        assign css_color = value.swatch.color
      endif
    -%}

    <!-- Checking Availability - Show all variants regardless of availability -->
    {%- liquid
      assign available = false
      assign variant_exists = false

      for variant in product.variants
        unless variant[current_option] == value
          continue
        endunless

        unless variant[other_options[0]] == current_variant[other_options[0]]
          continue
        endunless

        unless variant[other_options[1]] == current_variant[other_options[1]]
          continue
        endunless

        assign variant_exists = true
        if variant.available
          assign available = true
        endif
      endfor
    -%}

    <!-- Building Variant Image -->
    {%- liquid
      for variant in product.variants
        unless variant[current_option] == value
          continue
        endunless

        unless variant[other_options[0]] == current_variant[other_options[0]]
          continue
        endunless

        unless variant[other_options[1]] == current_variant[other_options[1]]
          continue
        endunless

        if variant.image
          assign variant_image_url = variant.image | image_url: width: 100, height: 100, crop: 'center'
        endif
        break
      endfor

      assign checked = ""
      if current_variant[current_option] == value
        assign checked = 'checked="checked"'
      endif

      assign swatch_img = null
      assign swatch_color_name = value | handle | append: '.png'

      if images[swatch_color_name] != blank
        assign swatch_img = swatch_color_name | file_url
      endif
    -%}

    {% capture radio_button %}
      <input type="radio" id="{{ section.id }}-{{ option.name }}-{{ forloop.index0 }}"
          class="swatches__form--input"
          name="{{ option_name }}"
          value="{{ value | escape }}"
          form="product-form-{{ section.id }}"
          data-position="{{ option.position }}"
          data-option-value="{{ value | escape }}"
          {{ checked }}>
    {% endcapture %}

    {% capture sold_out_cross %}
      <div class="swatches__sold-out--image crossed-out"></div>
    {% endcapture %}

    {% capture regular_swatch %}
      <div class="swatches__swatch--regular swatch-element {% unless available %}soldout{% endunless %} js-swatch-element custom-outer-sold-out" data-option-value="{{ value | escape }}" data-option-position="{{ option.position }}" data-available="{{ available }}">
        {{ radio_button }}
        <label class="swatches__form--label" for="{{ section.id }}-{{ option.name }}-{{ forloop.index0 }}" tabindex="0">
          {{ value }}
          {% unless available %}{{ sold_out_cross }}{% endunless %}
        </label>
      </div>
    {% endcapture %}

    {% capture color_swatch %}
      <div class="swatches__swatch--color swatch-element color swatches__shape--{{ color_swatch_shape }} {% unless available %}soldout{% endunless %} js-swatch-element parent-dflex" data-option-value="{{ value | escape }}" data-option-position="{{ option.position }}" data-available="{{ available }}">
        <div class="color_dflex">
        {{ radio_button }}
        {% if variant_image_url %}
          <!-- Show variant image if available -->
          <label class="swatches__form--label"
            for="{{ section.id }}-{{ option.name }}-{{ forloop.index0 }}"
            tabindex="0"
            style="background-image: url({{ variant_image_url }}); background-position: center center; background-size: cover;">
           <div class="swatches__sold-out--image crossed-out"></div>
          </label>
          <span class="swatches__color-name">{{ value | truncatewords:1 }}</span>

        {% else %}
          <!-- Fallback to color swatch if no variant image -->
          <label class="swatches__form--label"
            for="{{ section.id }}-{{ option.name }}-{{ forloop.index0 }}"
            tabindex="0"
            style="
            {% unless color_swatch_style == 'default-color' %}
             background-image: url({{ variant_image_url }});; background-position: center center; background-size: 50px;
            {% endunless %}">
             <div class="swatches__sold-out--image crossed-out"></div>
          </label>
          <span class="swatches__color-name">{{ value }}</span>
        {% endif %}
          </div>
      </div>
    {% endcapture %}

    {% if show_color_swatches and color_swatch_options contains option_name %}
      {{ color_swatch }}
    {% else %}
      {{ regular_swatch }}
    {% endif %}
  {% endfor %}
</div>

<!-- Add variant data for JavaScript -->
{% if option.position == 1 %}
<script id="product-variants-data-{{ section.id }}" type="application/json">
{
  "variants": [
    {% for variant in product.variants %}
    {
      "id": {{ variant.id }},
      "available": {{ variant.available }},
      "option1": "{{ variant.option1 | escape }}",
      "option2": "{{ variant.option2 | escape }}",
      "option3": "{{ variant.option3 | escape }}"
    }{% unless forloop.last %},{% endunless %}
    {% endfor %}
  ],
  "colorOptions": {{ color_swatch_options | json }},
  "sizeOptions": {{ size_swatches | json }}
}
</script>
{% endif %}

<script>
document.addEventListener('DOMContentLoaded', function() {
  const productData = document.getElementById('product-variants-data-{{ section.id }}');
  if (!productData) return;
  
  const data = JSON.parse(productData.textContent);
  const variants = data.variants;
  const colorOptions = data.colorOptions;
  const sizeOptions = data.sizeOptions;
  
  // Helper function to get currently selected values for each option
  function getCurrentSelections() {
    const selections = {};
    const containers = document.querySelectorAll('.js-variant-selector');
    
    containers.forEach(function(container) {
      const optionName = container.getAttribute('data-option-name');
      const checkedInput = container.querySelector('.swatches__form--input:checked');
      if (checkedInput) {
        const optionPosition = checkedInput.getAttribute('data-position');
        selections['option' + optionPosition] = checkedInput.value;
      }
    });
    
    return selections;
  }
  
  // Function to check if a specific variant combination is available
  function isVariantAvailable(option1, option2, option3) {
    return variants.some(function(variant) {
      return variant.option1 === option1 && 
             variant.option2 === option2 && 
             variant.option3 === option3 && 
             variant.available;
    });
  }
  
  // Function to update color swatches based on current selections
  function updateColorSwatches() {
    const currentSelections = getCurrentSelections();
    const colorContainers = document.querySelectorAll('.js-variant-selector');
    
    colorContainers.forEach(function(container) {
      const optionName = container.getAttribute('data-option-name');
      
      if (colorOptions.includes(optionName)) {
        const optionPosition = container.getAttribute('data-option-index');
        const currentOption = 'option' + optionPosition;
        
        const swatches = container.querySelectorAll('.js-swatch-element');
        
        swatches.forEach(function(swatch) {
          const colorValue = swatch.getAttribute('data-option-value');
          const crossedOut = swatch.querySelector('.crossed-out');
          
          // Create test variant combination
          const testVariant = {
            option1: currentSelections.option1,
            option2: currentSelections.option2,
            option3: currentSelections.option3
          };
          
          // Replace the current option with the color value we're testing
          testVariant[currentOption] = colorValue;
          
          // Check if this combination is available
          const available = isVariantAvailable(testVariant.option1, testVariant.option2, testVariant.option3);
          
          // Update swatch styling
          if (available) {
            swatch.classList.remove('swatch-sold-out', 'soldout');
            if (crossedOut) {
              crossedOut.style.display = 'none';
            }
          } else {
            swatch.classList.add('swatch-sold-out', 'soldout');
            if (crossedOut) {
              crossedOut.style.display = 'block';
            }
          }
        });
      }
    });
  }
  
  // Function to update size swatches based on current selections
  function updateSizeSwatches() {
    const currentSelections = getCurrentSelections();
    const sizeContainers = document.querySelectorAll('.js-variant-selector');
    
    sizeContainers.forEach(function(container) {
      const optionName = container.getAttribute('data-option-name');
      
      if (sizeOptions.includes(optionName)) {
        const optionPosition = container.getAttribute('data-option-index');
        const currentOption = 'option' + optionPosition;
        
        const swatches = container.querySelectorAll('.js-swatch-element');
        
        swatches.forEach(function(swatch) {
          const sizeValue = swatch.getAttribute('data-option-value');
          
          // Create test variant combination
          const testVariant = {
            option1: currentSelections.option1,
            option2: currentSelections.option2,
            option3: currentSelections.option3
          };
          
          // Replace the current option with the size value we're testing
          testVariant[currentOption] = sizeValue;
          
          // Check if ANY combination with this size is available
          let hasAvailableColorForSize = false;
          
          // Get all possible color values for other options
          const otherOptions = ['option1', 'option2', 'option3'].filter(opt => opt !== currentOption);
          
          variants.forEach(function(variant) {
            if (variant[currentOption] === sizeValue && variant.available) {
              // Check if this variant matches our other selected options (if any)
              let matches = true;
              otherOptions.forEach(function(otherOpt) {
                if (currentSelections[otherOpt] && variant[otherOpt] !== currentSelections[otherOpt]) {
                  matches = false;
                }
              });
              
              if (matches) {
                hasAvailableColorForSize = true;
              }
            }
          });
          
          // Update size swatch styling
          if (hasAvailableColorForSize) {
            swatch.classList.remove('size-strike-on');
          } else {
            swatch.classList.add('size-strike-on');
          }
        });
      }
    });
  }
  
  // Function to update selected class for regular swatches
  function updateSelectedClass() {
    const regularSwatches = document.querySelectorAll('.swatches__swatch--regular');
    
    regularSwatches.forEach(function(swatch) {
      const input = swatch.querySelector('.swatches__form--input');
      if (input && input.checked) {
        swatch.classList.add('selected-cs');
      } else {
        swatch.classList.remove('selected-cs');
      }
    });
  }
  
  // Function to update all swatches
  function updateAllSwatches() {
    updateColorSwatches();
    updateSizeSwatches();
    updateSelectedClass();
  }
  
  // Add event listeners to all inputs
  const allContainers = document.querySelectorAll('.js-variant-selector');
  allContainers.forEach(function(container) {
    const inputs = container.querySelectorAll('.swatches__form--input');
    
    inputs.forEach(function(input) {
      input.addEventListener('change', function() {
        // Update selected option display
        const optionPosition = this.getAttribute('data-position');
        const selectedSpan = document.getElementById('selected-option-' + optionPosition);
        if (selectedSpan) {
          selectedSpan.textContent = this.value;
        }
        
        // Update all swatches based on new selection
        updateAllSwatches();
      });
    });
  });
  
  // Initial setup on page load
  updateAllSwatches();
});
</script>