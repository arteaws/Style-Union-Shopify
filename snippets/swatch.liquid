<style>
.swatch-sold-out .color_dflex {
    opacity: 0.6;
}  

.swatch-sold-out .color_dflex .swatches__form--label .crossed-out{
  display:block !important;
}  
  
.color_dflex {
    display: flex;
    flex-direction: column;
    align-items: center;
}
.swatches__color-name{
  font-size: 12px;
}
.swatch-hidden {
    display: none !important;
}

#addToCart[type="submit"][value="Sold Out"] {
    display: none;
} 
span.price__badge.price__badge--sold-out {
    display: none;
}  
.swatch-sold-out .swatches__form--label {
    cursor: not-allowed;
}

.swatches__sold-out--image.crossed-out {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 2;
}

.swatches__sold-out--image.crossed-out::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, transparent 51%, #000000 48%, #000000 52%, transparent 52%);
    z-index: 3;
    pointer-events: none;
}

.size-strike-on {
    position: relative;
    opacity: 0.6;
}
.custom-outer-sold-out{
   width:60px;
   height:40px;
} 
.custom-outer-sold-out .swatches__form--label {
  width: 100%;
  height: 100%;
}
.size-strike-on::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 68px;
  height: 1px;
  background-color: #000000;
  transform: translate(-50%, -50%) rotate(31deg);
  z-index: 2;
  pointer-events: none;
}
.size-strike-on.selected-cs::before {
background-color: #fff;
}
.size-strike-on .swatches__form--label {
    cursor: not-allowed;
}

.swatches__form--label {
    position: relative;
    display: inline-block;
}

/* Add transition for smooth visual changes */
.js-swatch-element {
    transition: opacity 0.2s ease-in-out;
}

/* Hide elements initially to prevent flash */
.swatches__container {
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
}

.swatches__container.loaded {
    opacity: 1;
}
</style>

{%- liquid
  assign option_name = option.name | downcase
  assign color_swatch_options = settings.swatch_option_names | replace: ' ,', ',' | replace: ', ', ',' | split: ',' | downcase
  assign current_option = "option" | append: option.position
  assign other_options = "option1 option2 option3" | remove: current_option | strip | split: " "
  assign size_swatches = "size, sizes" | split: ", "
-%}

<div class="swatches__container js-variant-selector product__section--element" data-option-index="{{ option.position }}" data-option-name="{{ option.name | downcase }}" data-other-options='{{ other_options | json }}'>

  {% unless template == 'product.quick' %}
    {% if show_size_chart and size_swatches contains option_name %}
      <div class="size-chart">
        <button
          class="button-as-link js-modal-open"
          type="button"
          name="button"
          aria-label="Open popup"
          data-wau-modal-target="product-modal--{{ section.id }}--{{ forloop.index }}">
          {{ size_chart_label }}
        </button>

        <div data-wau-modal-content="product-modal--{{ section.id }}--{{ forloop.index }}" style="display: none;">
          <div class="rte">
            {{ size_chart_page.content }}
          </div>
        </div>
      </div>
    {% endif %}
  {% endunless %}

  <p class="swatches__option-name">{{ option.name }}: {% for value in option.values %}{% if option.selected_value == value %}<span id="selected-option-{{ option.position }}" class="swatches__option-value">{{ value }}</span>{% endif %}{% endfor %}</p>

  {% for value in option.values %}
    {%- liquid
      assign image_url = value | handle | append: '.png' | file_url
      assign css_color = value | split: ' ' | last | handle
      assign available = false
      assign swatch_image_url = nil
      assign variant_image_url = nil
      
      if value.swatch.image
        assign swatch_image_url = value.swatch.image | image_url: width: 50
      endif
      if value.swatch.color and color_swatch_style == 'swatch'
        assign css_color = value.swatch.color
      endif
    -%}

    {%- liquid
      assign available = false
      assign variant_exists = false

      for variant in product.variants
        unless variant[current_option] == value
          continue
        endunless

        unless variant[other_options[0]] == current_variant[other_options[0]]
          continue
        endunless

        unless variant[other_options[1]] == current_variant[other_options[1]]
          continue
        endunless

        assign variant_exists = true
        if variant.available
          assign available = true
        endif
      endfor
    -%}

    {%- liquid
      for variant in product.variants
        unless variant[current_option] == value
          continue
        endunless

        unless variant[other_options[0]] == current_variant[other_options[0]]
          continue
        endunless

        unless variant[other_options[1]] == current_variant[other_options[1]]
          continue
        endunless

        if variant.image
          assign variant_image_url = variant.image | image_url: width: 100, height: 100, crop: 'center'
        endif
        break
      endfor

      assign checked = ""
      if current_variant[current_option] == value
        assign checked = 'checked="checked"'
      endif

      assign swatch_img = null
      assign swatch_color_name = value | handle | append: '.png'

      if images[swatch_color_name] != blank
        assign swatch_img = swatch_color_name | file_url
      endif
    -%}

    {% capture radio_button %}
      <input type="radio" id="{{ section.id }}-{{ option.name }}-{{ forloop.index0 }}"
          class="swatches__form--input"
          name="{{ option_name }}"
          value="{{ value | escape }}"
          form="product-form-{{ section.id }}"
          data-position="{{ option.position }}"
          data-option-value="{{ value | escape }}"
          {{ checked }}>
    {% endcapture %}

    {% capture sold_out_cross %}
      <div class="swatches__sold-out--image crossed-out"></div>
    {% endcapture %}

    {% capture regular_swatch %}
      <div class="swatches__swatch--regular swatch-element {% unless available %}soldout{% endunless %} js-swatch-element custom-outer-sold-out" data-option-value="{{ value | escape }}" data-option-position="{{ option.position }}" data-available="{{ available }}">
        {{ radio_button }}
        <label class="swatches__form--label" for="{{ section.id }}-{{ option.name }}-{{ forloop.index0 }}" tabindex="0">
          {{ value }}
          {% unless available %}{{ sold_out_cross }}{% endunless %}
        </label>
      </div>
    {% endcapture %}

    {% capture color_swatch %}
      <div class="swatches__swatch--color swatch-element color swatches__shape--{{ color_swatch_shape }} {% unless available %}soldout{% endunless %} js-swatch-element parent-dflex" data-option-value="{{ value | escape }}" data-option-position="{{ option.position }}" data-available="{{ available }}">
        <div class="color_dflex">
        {{ radio_button }}
        {% if variant_image_url %}
          <label class="swatches__form--label"
            for="{{ section.id }}-{{ option.name }}-{{ forloop.index0 }}"
            tabindex="0"
            style="background-image: url({{ variant_image_url }}); background-position: center center; background-size: cover;">
           <div class="swatches__sold-out--image crossed-out"></div>
          </label>
          <span class="swatches__color-name">{{ value | truncatewords:1 }}</span>
        {% else %}
          <label class="swatches__form--label"
            for="{{ section.id }}-{{ option.name }}-{{ forloop.index0 }}"
            tabindex="0"
            style="
            {% unless color_swatch_style == 'default-color' %}
             background-image: url({{ variant_image_url }});; background-position: center center; background-size: 50px;
            {% endunless %}">
             <div class="swatches__sold-out--image crossed-out"></div>
          </label>
          <span class="swatches__color-name">{{ value }}</span>
        {% endif %}
          </div>
      </div>
    {% endcapture %}

    {% if show_color_swatches and color_swatch_options contains option_name %}
      {{ color_swatch }}
    {% else %}
      {{ regular_swatch }}
    {% endif %}
  {% endfor %}
</div>

{% if option.position == 1 %}
<script id="product-variants-data-{{ section.id }}" type="application/json">
{
  "variants": [
    {% for variant in product.variants %}
    {
      "id": {{ variant.id }},
      "available": {{ variant.available }},
      "option1": "{{ variant.option1 | escape }}",
      "option2": "{{ variant.option2 | escape }}",
      "option3": "{{ variant.option3 | escape }}"
    }{% unless forloop.last %},{% endunless %}
    {% endfor %}
  ],
  "colorOptions": {{ color_swatch_options | json }},
  "sizeOptions": {{ size_swatches | json }}
}
</script>
{% endif %}

<script>
document.addEventListener('DOMContentLoaded', function() {
  const productData = document.getElementById('product-variants-data-{{ section.id }}');
  if (!productData) return;
  
  const data = JSON.parse(productData.textContent);
  const variants = data.variants;
  const colorOptions = data.colorOptions;
  const sizeOptions = data.sizeOptions;
  
  // Cache DOM elements to avoid repeated queries
  const allContainers = document.querySelectorAll('.js-variant-selector');
  const sizeContainers = [];
  const colorContainers = [];
  
  // Pre-categorize containers
  allContainers.forEach(function(container) {
    const optionName = container.getAttribute('data-option-name');
    if (sizeOptions.includes(optionName)) {
      sizeContainers.push(container);
    } else if (colorOptions.includes(optionName)) {
      colorContainers.push(container);
    }
  });
  
  // Batch DOM updates to prevent multiple reflows
  function batchUpdateDOM(updateFunction) {
    requestAnimationFrame(function() {
      updateFunction();
    });
  }
  
  function updateSelectedClass() {
    const regularSwatches = document.querySelectorAll('.swatches__swatch--regular');
    
    regularSwatches.forEach(function(swatch) {
      const input = swatch.querySelector('.swatches__form--input');
      if (input && input.checked) {
        swatch.classList.add('selected-cs');
      } else {
        swatch.classList.remove('selected-cs');
      }
    });
  }
  
  function checkSizeAvailability(selectedSize) {
    const availableColors = new Set();
    const totalColors = new Set();
    
    variants.forEach(function(variant) {
      if (variant.option1 === selectedSize || variant.option2 === selectedSize || variant.option3 === selectedSize) {
        [variant.option1, variant.option2, variant.option3].forEach(function(optionValue) {
          if (optionValue && optionValue !== selectedSize) {
            totalColors.add(optionValue);
            if (variant.available) {
              availableColors.add(optionValue);
            }
          }
        });
      }
    });
    
    return totalColors.size > 0 && availableColors.size === 0;
  }
  
  function updateSizeSwatches() {
    sizeContainers.forEach(function(container) {
      const swatches = container.querySelectorAll('.js-swatch-element');
      
      swatches.forEach(function(swatch) {
        const optionValue = swatch.getAttribute('data-option-value');
        const allColorsSoldOut = checkSizeAvailability(optionValue);
        
        if (allColorsSoldOut) {
          swatch.classList.add('size-strike-on');
        } else {
          swatch.classList.remove('size-strike-on');
        }
      });
    });
  }
  
  function filterColorSwatches() {
    let selectedSize = null;
    
    sizeContainers.forEach(function(container) {
      const checkedInput = container.querySelector('.swatches__form--input:checked');
      if (checkedInput) {
        selectedSize = checkedInput.value;
      }
    });
    
    if (!selectedSize) return;
    
    const availableColors = new Set();
    const soldOutColors = new Set();
    
    variants.forEach(function(variant) {
      if (variant.option1 === selectedSize || variant.option2 === selectedSize || variant.option3 === selectedSize) {
        [variant.option1, variant.option2, variant.option3].forEach(function(optionValue) {
          if (optionValue && optionValue !== selectedSize) {
            availableColors.add(optionValue);
            if (!variant.available) {
              soldOutColors.add(optionValue);
            }
          }
        });
      }
    });
    
    colorContainers.forEach(function(container) {
      const swatches = container.querySelectorAll('.js-swatch-element');
      
      swatches.forEach(function(swatch) {
        const optionValue = swatch.getAttribute('data-option-value');
        const isAvailable = swatch.getAttribute('data-available') === 'true';
        
        if (availableColors.has(optionValue)) {
          swatch.classList.remove('swatch-hidden');
          
          if (soldOutColors.has(optionValue) || !isAvailable) {
            swatch.classList.add('swatch-sold-out');
            swatch.classList.add('soldout');
          } else {
            swatch.classList.remove('swatch-sold-out');
            swatch.classList.remove('soldout');
          }
        } else {
          swatch.classList.add('swatch-hidden');
          const input = swatch.querySelector('.swatches__form--input');
          if (input && input.checked) {
            input.checked = false;
          }
        }
      });
    });
  }
  
  // Debounced event handler to prevent rapid firing
  function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = function() {
        clearTimeout(timeout);
        func.apply(this, args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }
  
  const debouncedUpdate = debounce(function(input) {
    const optionPosition = input.getAttribute('data-position');
    const selectedSpan = document.getElementById('selected-option-' + optionPosition);
    if (selectedSpan) {
      selectedSpan.textContent = input.value;
    }
    
    batchUpdateDOM(function() {
      updateSelectedClass();
      
      const container = input.closest('.js-variant-selector');
      const optionName = container.getAttribute('data-option-name');
      if (sizeOptions.includes(optionName)) {
        filterColorSwatches();
      }
    });
  }, 50);
  
  // Add event listeners
  allContainers.forEach(function(container) {
    const inputs = container.querySelectorAll('.swatches__form--input');
    
    inputs.forEach(function(input) {
      input.addEventListener('change', function() {
        debouncedUpdate(this);
      });
    });
  });
  
  // Single initial setup with batched DOM updates
  batchUpdateDOM(function() {
    updateSizeSwatches();
    filterColorSwatches();
    updateSelectedClass();
    
    // Show containers after initial setup
    allContainers.forEach(function(container) {
      container.classList.add('loaded');
    });
  });
});
</script>