{%- if template == 'index' -%}
<!-- Website Schema: -->
<script type="application/ld+json">
{
  "@context": "https://schema.org/",
  "@type": "WebSite",
  "name": "Style Union",
  "url": "https://styleunion.in/",
  "potentialAction": {
    "@type": "SearchAction",
    "target": "https://styleunion.in/search?q={search_term_string}",
    "query-input": "required name=search_term_string"
  }
}
</script>

<!-- Organization Schema (already available, but need to be optimized): -->
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "Organization",
  "name": "Style Union",
  "url": "https://styleunion.in/",
  "logo": "https://styleunion.in/cdn/shop/files/category_app_assets__1000___1000px___7_5a225ef2-7ced-45ea-861a-bdf34cdd0616.png?v=1721725988&width=1200",
  "contactPoint": {
    "@type": "ContactPoint",
    "telephone": "+91 9429692121",
    "contactType": "customer service",
    "areaServed": "IN",
    "availableLanguage": ["Hindi","en"]
  },
  "sameAs": [
    "https://www.facebook.com/Styleunion.in",
    "https://x.com/styleunion_in",
    "https://www.youtube.com/@styleunion_in",
    "https://www.instagram.com/styleunion.in/",
    "https://styleunion.in/"
  ]
}
</script>

{%- endif -%}




{% if template contains 'collection' %}
{% comment %}
  This approach generates schema for all products while keeping infinite scroll for UI
{% endcomment %}

<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  "name": "{{ collection.title | strip_html | escape }}",
  "url": "{{ shop.url }}{{ collection.url }}",
  "description": "{{ collection.description | strip_html | escape }}",
  "mainEntity": {
    "@type": "ItemList",
    "numberOfItems": {{ collection.products_count }},
    "itemListElement": "PLACEHOLDER_FOR_ALL_PRODUCTS"
  }{% if collection.image %},
  "image": "{{ collection.image | image_url: width: 1024 }}"{% endif %},
  "publisher": {
    "@type": "Organization",
    "name": "{{ shop.name | escape }}"{% if settings.logo %},
    "logo": {
      "@type": "ImageObject",
      "url": "{{ settings.logo | image_url: width: 300 }}"
    }{% endif %}
  }
}
</script>

<script>
document.addEventListener('DOMContentLoaded', async function() {
  const collectionHandle = '{{ collection.handle }}';
  const shopUrl = '{{ shop.permanent_domain }}';
  
  try {
    // Fetch all products from the collection
    const allProducts = await fetchAllCollectionProducts(collectionHandle);
    
    // Update the schema with all products
    updateSchemaWithAllProducts(allProducts);
    
  } catch (error) {
    console.error('Error loading all products for schema:', error);
  }
});

async function fetchAllCollectionProducts(collectionHandle) {
  const allProducts = [];
  let page = 1;
  let hasMore = true;
  
  while (hasMore) {
    try {
      const response = await fetch(`/collections/${collectionHandle}/products.json?limit=250&page=${page}`);
      const data = await response.json();
      
      if (data.products && data.products.length > 0) {
        allProducts.push(...data.products);
        page++;
        
        // Check if we got fewer products than requested (last page)
        if (data.products.length < 250) {
          hasMore = false;
        }
      } else {
        hasMore = false;
      }
    } catch (error) {
      console.error(`Error fetching page ${page}:`, error);
      hasMore = false;
    }
  }
  
  return allProducts;
}

function updateSchemaWithAllProducts(products) {
  const schemaScript = document.querySelector('script[type="application/ld+json"]');
  if (!schemaScript) return;
  
  try {
    const schema = JSON.parse(schemaScript.textContent);
    
    // Build the item list
    const itemListElements = products.map((product, index) => ({
      "@type": "ListItem",
      "position": index + 1,
      "item": {
        "@type": "Product",
        "name": product.title,
        "url": `${window.location.origin}${product.handle}`,
        "image": product.images[0] || "",
        "description": product.body_html?.replace(/<[^>]*>/g, '').substring(0, 160) || "",
        "sku": product.variants[0]?.sku || "",
        "brand": {
          "@type": "Brand",
          "name": product.vendor
        },
        "offers": {
          "@type": "Offer",
          "price": (product.variants[0]?.price / 100).toFixed(2),
          "priceCurrency": "{{ cart.currency.iso_code }}",
          "availability": `http://schema.org/${product.available ? 'InStock' : 'OutOfStock'}`,
          "priceValidUntil": "2030-01-01"
        }
      }
    }));
    
    // Update the schema
    schema.mainEntity.itemListElement = itemListElements;
    schema.mainEntity.numberOfItems = products.length;
    
    // Replace the script content
    schemaScript.textContent = JSON.stringify(schema, null, 2);
    
  } catch (error) {
    console.error('Error updating schema:', error);
  }
}
</script>
{% endif %}