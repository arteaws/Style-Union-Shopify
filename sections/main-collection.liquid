<style>
.custom-flex-pagination{
  text-align:center;
  margin-top:1rem;
  display: none; /* Hide pagination by default */
}  
.preloader-new{
  width:40px;
  margin:auto;
  height:40px;
}

@media only screen and (max-width: 768px) {
.mobile-sticky-filter {
        position: sticky;
        padding-top: 1rem;
        top: 75px;
        z-index: 99;
        background: white;
        left: 0;
        margin: auto !important;
  }
  .custom-relative-btn{
    position:relative;
    padding-left:1rem;
    text-align:left;
  }
.custom-accordion-svg {
    position: absolute;
    right: 16px;
    rotate: 180deg;
    top: 12px;
    line-height: 0;
    transition: rotate 0.3s ease; 
}

.custom-relative-btn.cs-open .custom-accordion-svg {
    rotate: 0deg;
}
}
</style>

{%- liquid
  assign collection_link = ''
  if collection.handle
    assign collection_link = '/collections/' | append: collection.handle
  elsif collection.products.first.type == collection.title
    assign collection_link = collection.title | url_for_type
  elsif collection.products.first.vendor == collection.title
    assign collection_link = collection.title | url_for_vendor
  endif

  assign show_sidebar = false
  assign filtering_enabled = false
  assign horizontal_filtering_enabled = false
  assign horizontal_sort = false
  assign side_sort = false

  for block in section.blocks
    if block.type == 'menu' or block.type == 'image' or block.type == 'text' or block.type == 'side_filter' or block.type == 'side_sortby'
      assign show_sidebar = true
    endif
    if block.type == 'dropdown_filter'
      assign horizontal_filtering_enabled = true
    endif
    if block.type == 'dropdown_sortby'
      assign horizontal_sort = true
    endif
    if block.type == 'side_filter'
      assign filtering_enabled = true
    endif
    if block.type == 'side_sortby'
      assign side_sort = true
    endif
  endfor

  assign grid = section.settings.grid
  assign product_limit = section.settings.grid | times: section.settings.rows

  assign filter_count = 0
  for filter in collection.filters
    if filter.type == 'price_range'
      if filter.min_value.value != nil or filter.max_value.value != nil
        assign filter_count = 1
      endif
    endif

    assign filter_count = filter_count | plus: filter.active_values.size
  endfor

  if section.settings.show_image and collection.image != blank
    assign collection_image = true
    assign desc_width = 'span-9'
  else
    assign collection_image = false
    assign desc_width = 'span-12'
  endif

  assign aos_mod = section.settings.grid | plus: 0
-%}

<section class="collection__page row grid__wrapper section-{{ section.id }} global__section"
data-section-id="{{ section.id }}"
data-section-type="collection-section"
data-collection-link="{{ collection_link }}">

  {% paginate collection.products by product_limit %}
    <div id="CollectionProductGrid" class="span-12 auto grid__wrapper grid__wrapper-nest gr0">

      {%- if section.settings.description_position == 'top' -%}
        <div class="collection__page-description {{ desc_width }} sm-span-12 auto">
          <div class="rte">
            {{ collection.description | remove: "[banner]" }}
          </div>
        </div>
        {%- if collection_image -%}
          <div class="collection__page-image span-3 sm-span-12 auto">
            {%
              render 'basic-responsive-image',
              type: collection.image,
              width: 350,
              loading: 'eager',
              fetchpriority: 'high'
            %}
          </div>
        {%- endif -%}
      {%- endif -%}

      {%- if horizontal_filtering_enabled or horizontal_sort -%}
        <form id="CollectionFiltersForm" class="span-12 md-span-12 auto" data-collection-filters>
          {% render 'collection-horizontal-toolbar',
            collection: collection,
            horizontal_filtering_enabled: horizontal_filtering_enabled,
            horizontal_sort: horizontal_sort %}
        </form>
      {%- endif -%}

      {% if show_sidebar %}
        <form id="CollectionSidebarFiltersForm" class="span-3 md-span-12 sm-span-12 auto mobile-sticky-filter" data-collection-sidebar-filters>
          {% render 'collection-sidebar',
            collection: collection, block: block %}
        </form>
      {% endif %}

      {% if show_sidebar %}<div class="collection__page--productContent span-9 md-span-12 sm-span-12 auto">{% endif %}

        {% if filter_count > 0 %}
          <div class="filtering__results span-12 auto js-filters-reset">
            <ul class="current_tags">
              {%- for filter in collection.filters -%}
                {%- for value in filter.active_values -%}
                  <li class="current_filters--filter current_tag">
                    <a class="js-current-filter" href="{{ value.url_to_remove }}">
                      {{ value.label | escape }}
                    </a>
                  </li>
                {%- endfor -%}
                {% if filter.type == "price_range" %}
                  {%- if filter.min_value.value != nil or filter.max_value.value != nil -%}
                    <li class="current_filters--filter current_tag">
                      <a class="js-current-filter" href="{{ filter.url_to_remove }}">
                        {%- if filter.min_value.value -%}{{ filter.min_value.value | money }}{%- else -%}{{ 0 | money }}{%- endif -%}-{%- if filter.max_value.value -%}{{ filter.max_value.value | money }}{%- else -%}{{ filter.range_max | money }}{%- endif -%}
                      </a>
                    </li>
                  {%- endif -%}
                {% endif %}
              {%- endfor -%}
              <li><a class="current_filters--clear js-current-filter clear-tags" href="{{ collection.url }}">{{ 'collections.filters.clear_all' | t }}</a></li>
            </ul>
          </div>
        {% endif %}

        {%- if collection.products.size >= 1 -%}
          <div id="main-collection-product-grid"
      class="product-loop collection__page-products grid-align-{{ settings.details_align }} span-12 auto"
      data-aos="fade"
      data-id="{{ section.id }}">
        
        {%- assign has_products = false -%}
        {%- assign product_counter = 0 -%}
        {%- assign sold_out_products = "" -%}
        
        {%- comment -%}First collect all sold-out products for later use{%- endcomment -%}
        {% for product in collection.products %}
          {% unless product.tags contains 'gift-with-purchase' %}
            {%- unless product.available -%}
              {%- capture sold_out_product -%}
                {{ product.id }}:{{ forloop.index }}
              {%- endcapture -%}
              {%- if sold_out_products == "" -%}
                {%- assign sold_out_products = sold_out_product -%}
              {%- else -%}
                {%- assign sold_out_products = sold_out_products | append: "," | append: sold_out_product -%}
              {%- endif -%}
            {%- endunless -%}
          {% endunless %}
        {% endfor %}
        
        {%- comment -%}Process available products normally{%- endcomment -%}
        {% for product in collection.products %}
          {% unless product.tags contains 'gift-with-purchase' %}
            
            {%- if product.available -%}
              {%- assign product_counter = product_counter | plus: 1 -%}
              {%- assign has_products = true -%}
              
              <div id="product-listing-{{ product.id }}" 
                class="item product-index collection__page-product js-product-listing"
                data-alpha="{{ product.title }}" 
                data-product-id="{{ product.id }}" 
                data-price="{{ product.price }}"
                data-aos="fade"
                data-aos-delay="{{ product_counter | minus: 1 | modulo: aos_mod | times: 100 }}">
                {% liquid
                  assign loading = 'lazy'
                  assign fetch_priority = 'auto'
                  if product_counter <= grid
                    assign loading = 'eager'
                    assign fetch_priority = 'high'
                  endif
                %}
                {% render 'product-listing',
                  product: product,
                  collection: collection,
                  loading: loading,
                  fetchpriority: fetch_priority %}
              </div>
            {%- endif -%}
            
          {% endunless %}
        {% endfor %}
        
        {%- comment -%}Add sold-out products only on the last page{%- endcomment -%}
        {%- if paginate.current_page == paginate.pages and sold_out_products != "" -%}
          {%- assign sold_out_array = sold_out_products | split: "," -%}
          {% for sold_out_item in sold_out_array %}
            {%- assign sold_out_data = sold_out_item | split: ":" -%}
            {%- assign sold_out_id = sold_out_data[0] -%}
            {%- assign sold_out_index = sold_out_data[1] | plus: 0 -%}
            
            {%- for product in collection.products -%}
              {%- if product.id == sold_out_id and forloop.index == sold_out_index -%}
                {% unless product.tags contains 'gift-with-purchase' %}
                  {%- assign product_counter = product_counter | plus: 1 -%}
                  {%- assign has_products = true -%}
                  
                  <div id="product-listing-{{ product.id }}" 
                    class="item product-index collection__page-product js-product-listing sold-out"
                    data-alpha="{{ product.title }}" 
                    data-product-id="{{ product.id }}" 
                    data-price="{{ product.price }}"
                    data-aos="fade"
                    data-aos-delay="{{ product_counter | minus: 1 | modulo: aos_mod | times: 100 }}">
                    {% liquid
                      assign loading = 'lazy'
                      assign fetch_priority = 'auto'
                    %}
                    {% render 'product-listing',
                      product: product,
                      collection: collection,
                      loading: loading,
                      fetchpriority: fetch_priority %}
                  </div>
                {% endunless %}
                {%- break -%}
              {%- endif -%}
            {%- endfor -%}
          {% endfor %}
        {%- endif -%}
        
        {%- comment -%}Show "No products" message if no product cards were rendered{%- endcomment -%}
        {%- unless has_products -%}
          <div class="col-span-full text-center py-16">
            <p class="text-lg">No Products Found</p>
          </div>
        {%- endunless -%}
        
        <style>
          .collection__page-products {
            grid-template-columns: repeat({{ grid }}, 1fr);
          }
        </style>
      </div>
          <div id="Huratips-Pagination" class="custom-flex-pagination" {% if paginate.next %}style="display:block"{% endif %}>
          {% if paginate.next %}
          <a href="{{ paginate.next.url }}" data-next-url="{{ paginate.next.url }}">Loading More</a>
          {% endif %}  
          </div>

        {%- else -%}
          <div id="main-collection-product-grid"
          class="collection collection--empty span-12 auto"
          data-id="{{ section.id }}">
            <span class="rte">{{ 'collections.filters.use_fewer_filters_html' | t: link: collection.url, class: "underline" }}</span>
          </div>
          <div id="Huratips-Pagination" {% if paginate.next %}style="display:block"{% endif %}>
          {% if paginate.next %}
          <a href="{{ paginate.next.url }}" data-next-url="{{ paginate.next.url }}">Loading More</a>
          {% endif %}  
          </div>
        {%- endif -%}

      {% if show_sidebar %}</div>{% endif %}

      {%- if section.settings.description_position == 'bottom' -%}
        <div class="collection__page-description span-12 auto">
          <div class="rte">
            {{ collection.description | remove: "[banner]" }}
          </div>
        </div>
      {%- endif -%}
    </div>
  {% endpaginate %}
</section>

<script>
// Improved Infinite Scroll Implementation
document.addEventListener('DOMContentLoaded', function() {
  let isLoading = false;
  let nextPageUrl = '';
  const loadingSpinner = '<img class="preloader-new" src="https://cdn.shopify.com/s/files/1/0623/4754/2777/files/Iphone-spinner-2_a34e5a24-da69-4a18-b9ba-563ae9b95135.gif?v=1751544968">';
  
  // Initialize the infinite scroll
  function initInfiniteScroll() {
    const paginationElement = document.getElementById('Huratips-Pagination');
    if (!paginationElement) return;
    
    nextPageUrl = paginationElement.querySelector('a')?.getAttribute('data-next-url');
    if (!nextPageUrl) return;
    
    // Hide the pagination element initially
    paginationElement.style.display = 'none';
    
    // Set up intersection observer for infinite scroll
    const observer = new IntersectionObserver(handleIntersection, {
      root: null,
      rootMargin: '0px',
      threshold: 0.1
    });
    
    // Observe a small element at the bottom of the page
    const sentinel = document.createElement('div');
    sentinel.style.height = '1px';
    sentinel.style.width = '100%';
    document.querySelector('#main-collection-product-grid').appendChild(sentinel);
    observer.observe(sentinel);
  }
  
  // Handle intersection callback
  function handleIntersection(entries) {
    if (isLoading || !nextPageUrl) return;
    
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        loadMoreProducts();
      }
    });
  }
  
  // Load more products function
  function loadMoreProducts() {
    if (isLoading || !nextPageUrl) return;
    
    isLoading = true;
    const paginationElement = document.getElementById('Huratips-Pagination');
    if (paginationElement) {
      paginationElement.innerHTML = loadingSpinner;
      paginationElement.style.display = 'block';
    }
    
    fetch(nextPageUrl)
      .then(response => response.text())
      .then(text => {
        const parser = new DOMParser();
        const html = parser.parseFromString(text, 'text/html');
        
        // Extract products and next page URL
        const newProducts = html.querySelector('#main-collection-product-grid').innerHTML;
        const newNextUrl = html.querySelector('#Huratips-Pagination a')?.getAttribute('data-next-url');
        
        // Append new products
        document.querySelector('#main-collection-product-grid').insertAdjacentHTML('beforeend', newProducts);
        
        // Update next page URL
        nextPageUrl = newNextUrl;
        
        // Reload any necessary scripts (like wishlist)
        if (typeof ReloadSmartWishlist === 'function') {
          ReloadSmartWishlist();
        }
      })
      .catch(error => {
        console.error('Error loading more products:', error);
      })
      .finally(() => {
        isLoading = false;
        const paginationElement = document.getElementById('Huratips-Pagination');
        if (paginationElement) {
          paginationElement.style.display = nextPageUrl ? 'block' : 'none';
          if (nextPageUrl) {
            paginationElement.innerHTML = `<a href="${nextPageUrl}" data-next-url="${nextPageUrl}">Loading More</a>`;
          } else {
            paginationElement.style.display = 'none';
          }
        }
      });
  }
  
  // Reinitialize when filters change
  function handleFilterChange() {
    // Reset state
    isLoading = false;
    nextPageUrl = '';
    
    // Find the new pagination element
    const newPaginationElement = document.getElementById('Huratips-Pagination');
    if (newPaginationElement) {
      nextPageUrl = newPaginationElement.querySelector('a')?.getAttribute('data-next-url');
      newPaginationElement.style.display = nextPageUrl ? 'block' : 'none';
    }
  }
  
  // Initialize on load
  initInfiniteScroll();
  
  // Reinitialize when filters are applied (both AJAX and full page reloads)
  document.addEventListener('shopify:collection:updated', handleFilterChange);
  document.addEventListener('shopify:section:load', handleFilterChange);
  
  // Fallback for filter changes that don't trigger the above events
  const filterForms = document.querySelectorAll('[data-collection-filters], [data-collection-sidebar-filters]');
  filterForms.forEach(form => {
    form.addEventListener('change', function() {
      setTimeout(handleFilterChange, 1000);
    });
  });
});
</script>




{% schema %}
{
  "name": "Collection page",
  "max_blocks": 8,
  "settings": [{
      "type": "range",
      "id": "rows",
      "min": 1,
      "max": 10,
      "step": 1,
      "label": "Rows",
      "default": 4
    },
    {
      "type": "range",
      "id": "grid",



      
      "min": 2,
      "max": 4,
      "step": 1,
      "label": "Products per row",
      "default": 3
    },
    {
      "type": "checkbox",
      "id": "show_image",
      "label": "Show collection image",
      "default": false
    },
    {
      "type": "select",
      "id": "description_position",
      "label": "Description position",
      "options": [
        {
          "value": "top",
          "label": "Top"
        },
        {
          "value": "bottom",
          "label": "Bottom"
        }
      ],
      "default": "top"
    }
  ],
  "blocks": [{
      "type": "dropdown_filter",
      "name": "Dropdown filter",
      "limit": 1,
      "settings": [
        {
        "type": "paragraph",
        "content": "Learn how to add storefront filters [here](https:\/\/help.shopify.com\/en\/manual\/online-store\/themes\/os20\/customize\/filters)"
        },
        {
          "type": "checkbox",
          "id": "show_color_swatches",
          "label":"Show color swatches",
          "default": true
        }
      ]
    },
    {
      "type": "dropdown_sortby",
      "limit": 1,
      "name": "Dropdown sort by",
      "settings": []
    },
    {
      "type": "menu",
      "name": "Sidebar menu",
      "settings": [{
          "type": "link_list",
          "id": "side_nav",
          "label": "Sidebar menu"
        },
        {
          "type": "text",
          "id": "heading",
          "label": "Menu title",
          "default": "Explore"
        }
      ]
    },
    {
      "type": "text",
      "name": "Sidebar text",
      "settings": [{
        "type": "richtext",
        "id": "sidebar_text",
        "label": "Text",
        "default": "<p>Add some text to your collection page sidebar</p>"
      }]
    },
    {
      "type": "side_filter",
      "name": "Sidebar filter",
      "limit": 1,
      "settings": [
        {
          "type": "paragraph",
          "content": "Learn how to add storefront filters [here](https:\/\/help.shopify.com\/en\/manual\/online-store\/themes\/os20\/customize\/filters)"
        },
        {
          "type": "checkbox",
          "id": "show_color_swatches",
          "label":"Show color swatches",
          "default": true
        },
        {
          "type": "checkbox",
          "id": "show_filter_count",
          "label":"Show filter count",
          "default": true
        }
      ]
    },
    {
      "type": "side_sortby",
      "limit": 1,
      "name": "Sidebar sort by",
      "settings": []
    },
    {
      "type": "image",
      "name": "Sidebar image",
      "settings": [{
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        },
        {
          "type": "url",
          "id": "link",
          "label": "Link",
          "info": "Optional"
        }
      ]
    }
  ]
}
{% endschema %}