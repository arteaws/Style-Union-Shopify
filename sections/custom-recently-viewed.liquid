{%- liquid
  assign desktop_slides = section.settings.desktop_slides
  assign mobile_slides = section.settings.mobile_slides
  assign heading = section.settings.heading
  assign bg_color = section.settings.bg_color
  assign text_color = section.settings.text_color
  assign heading_size = section.settings.heading_size
  assign max_products = section.settings.max_products
  assign show_swatches = section.settings.show_swatches
  assign show_sizes = section.settings.show_sizes
-%}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css">
<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js" defer></script>

<style>
  .custom-recent-products {
    background-color: {{ bg_color }};
    color: {{ text_color }};
    padding: 40px 0;
    position: relative;
    z-index: 0;
  }

  .custom-recent-products__heading {
    font-size: {{ heading_size }}px;
    text-align: center;
    margin-bottom: 30px;
  }
  
  .custom-recent-products__slider {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    overflow: hidden;
  }
  
  .custom-recent-products__slide {
    height: auto;
    width: calc((100% - ({{ desktop_slides | minus: 1 }} * 30px)) / {{ desktop_slides }});
  }
  
  .swiper-button-next,
  .swiper-button-prev {
    color: {{ text_color }};
    background: rgba(255,255,255,0.5);
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  }
  
  .swiper-button-next:hover,
  .swiper-button-prev:hover {
    background: rgba(255,255,255,0.8);
  }
  
  .swiper-button-next::after,
  .swiper-button-prev::after {
    font-size: 20px;
  }

  /* Swatch styles */
  .custom-recent-products .swatches__container {
    margin-top: 10px;
  }
  
  .custom-recent-products .swatches__option-name {
    display: none;
  }
  
  .custom-recent-products .swatches__swatch--color {
    margin: 2px;
  }
  
  .custom-recent-products .swatches__form--label {
    min-width: 20px;
    height: 20px;
    margin: 0;
  }
  
  .custom-recent-products .swatches__color-name {
    display: none;
  }

  /* Mobile styles */
  @media (max-width: 749px) {
    .custom-recent-products__slider {
      padding: 0 15px;
    }
    
    .custom-recent-products__heading {
      font-size: calc({{ heading_size }}px * 0.8);
    }
    
    .custom-recent-products__slide {
      width: calc((100% - ({{ mobile_slides | minus: 1 }} * 15px)) / {{ mobile_slides }});
    }
    
    .swiper-button-next,
    .swiper-button-prev {
      display: none;
    }
  }
</style>

<div class="custom-recent-products" data-section-id="{{ section.id }}">
  {% if heading != blank %}
    <h2 class="custom-recent-products__heading">{{ heading }}</h2>
  {% endif %}
  
  <div class="custom-recent-products__slider-container">
    <div class="swiper custom-recent-products__slider">
      <div class="swiper-wrapper" id="recent-products-container-{{ section.id }}">
        <!-- Products will be loaded here -->
      </div>
      
      <div class="swiper-button-next"></div>
      <div class="swiper-button-prev"></div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const sectionId = '{{ section.id }}';
    
    // Function to get recent products from localStorage
    function getRecentProducts() {
      try {
        const storedData = localStorage.getItem('recentlyViewedProducts') || '[]';
        const products = JSON.parse(storedData);
        
        // Filter valid products
        const validProducts = products.filter(p => p && p.handle && p.id);
        return validProducts;
      } catch (e) {
        console.error('Error loading recent products:', e);
        return [];
      }
    }

    // Function to create product card with swatches
    function createProductCard(product, shopifyData = null) {
      const slide = document.createElement('div');
      slide.className = 'swiper-slide custom-recent-products__slide';
      
      // Use shopify data if available, otherwise use stored data
      const productData = shopifyData || product;
      const imageUrl = productData.featured_image?.src || product.image || '{{ "product-1.png" | asset_img_url: "400x" }}';
      const price = shopifyData ? (shopifyData.price / 100).toFixed(2) : 'Loading...';
      const variants = shopifyData?.variants || [];
      
      // Create swatches HTML if enabled
      let swatchesHTML = '';
      if ({{ show_swatches }} || {{ show_sizes }}) {
        swatchesHTML = `
          <div class="swatches__container" data-product-id="${product.id}">
            ${generateSwatchesHTML(productData, variants)}
          </div>
        `;
      }
      
      slide.innerHTML = `
        <div class="prod-container">
          <div class="prod-image">
            <a href="${product.url}" title="${product.title}">
              <div class="reveal">
                <img src="${imageUrl}" alt="${product.title}" loading="lazy" style="width: 100%; height: 200px; object-fit: cover;">
              </div>
            </a>
          </div>
          <div class="product-info">
            <a href="${product.url}">
              <h2 style="font-size: 14px; margin: 10px 0;">${product.title}</h2>
            </a>
            <div class="product-price">
              <span class="price">$${price}</span>
            </div>
            ${swatchesHTML}
          </div>
        </div>
      `;
      
      return slide;
    }
    
    // Function to generate swatches HTML
    function generateSwatchesHTML(product, variants) {
      let html = '';
      const options = product.options || [];
      const colorOptionNames = ['color', 'colour', 'Color', 'Colour'];
      
      options.forEach((option, index) => {
        const optionName = option.name?.toLowerCase() || '';
        const isColorOption = colorOptionNames.includes(optionName);
        
        // Only show swatches if enabled in settings
        if ((isColorOption && {{ show_swatches }}) || (!isColorOption && {{ show_sizes }})) {
          html += `<div class="swatches__option" data-option-index="${index + 1}">`;
          option.values.forEach(value => {
            const variantForOption = variants.find(v => 
              v.option1 === value || v.option2 === value || v.option3 === value
            );
            
            const available = variantForOption?.available || false;
            const soldOutClass = available ? '' : 'soldout';
            
            if (isColorOption) {
              // Color swatch
              html += `
                <div class="swatches__swatch--color swatch-element ${soldOutClass}" 
                  data-value="${value}" 
                  data-available="${available}">
                  <span class="swatches__form--label" 
                    style="background-color: ${getColorValue(value)}"
                    title="${value}">
                  </span>
                </div>
              `;
            } else {
              // Size swatch
              html += `
                <div class="swatches__swatch--regular swatch-element ${soldOutClass}" 
                  data-value="${value}" 
                  data-available="${available}">
                  <span class="swatches__form--label">${value}</span>
                </div>
              `;
            }
          });
          html += `</div>`;
        }
      });
      
      return html;
    }
    
    // Helper function to get color value for swatch
    function getColorValue(colorName) {
      // This is a simplified version - you might want to expand this
      // to match your actual color swatch implementation
      const colorMap = {
        'red': '#ff0000',
        'blue': '#0000ff',
        'green': '#00ff00',
        'black': '#000000',
        'white': '#ffffff'
        // Add more color mappings as needed
      };
      
      return colorMap[colorName.toLowerCase()] || '#cccccc';
    }

    // Function to fetch product data from Shopify
    async function fetchProductData(handle) {
      try {
        const response = await fetch(`/products/${handle}.js`);
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        return await response.json();
      } catch (e) {
        console.error(`Error fetching ${handle}:`, e);
        return null;
      }
    }

    async function loadRecentProducts() {
      const container = document.getElementById(`recent-products-container-${sectionId}`);
      if (!container) return;
      
      // Get recent products from localStorage
      const recentProducts = getRecentProducts();
      if (recentProducts.length === 0) {
        container.innerHTML = '<div class="swiper-slide"><p>No recent products found</p></div>';
        return;
      }
      
      // Limit products
      const limitedProducts = recentProducts.slice(0, {{ max_products }});
      
      // Clear container
      container.innerHTML = '';
      
      // Create cards for each product
      for (const product of limitedProducts) {
        // Create initial card with stored data
        const card = createProductCard(product);
        container.appendChild(card);
        
        // Fetch fresh data from Shopify and update card
        try {
          const shopifyData = await fetchProductData(product.handle);
          if (shopifyData) {
            // Update card with fresh data
            const updatedCard = createProductCard(product, shopifyData);
            container.replaceChild(updatedCard, card);
          }
        } catch (e) {
          console.error(`Failed to update ${product.title}:`, e);
        }
      }
      
      // Initialize Swiper
      initializeSwiper();
    }
    
    function initializeSwiper() {
      const sliderEl = document.querySelector(`[data-section-id="${sectionId}"] .swiper`);
      
      if (window.recentProductsSwiper) {
        window.recentProductsSwiper.destroy(true, true);
      }
      
      window.recentProductsSwiper = new Swiper(sliderEl, {
        slidesPerView: 'auto',
        spaceBetween: 20,
        navigation: {
          nextEl: '.swiper-button-next',
          prevEl: '.swiper-button-prev',
        },
        breakpoints: {
          320: {
            slidesPerView: 1,
            spaceBetween: 15
          },
          640: {
            slidesPerView: 2,
            spaceBetween: 20
          },
          1024: {
            slidesPerView: {{ desktop_slides }},
            spaceBetween: 30
          }
        }
      });
    }
    
    // Start loading
    loadRecentProducts();
    
    // Listen for storage changes
    window.addEventListener('storage', loadRecentProducts);
  });
</script>

{% schema %}
{
  "name": "Custom Recent Products",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Recently Viewed Products"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 12,
      "max": 36,
      "step": 1,
      "unit": "px",
      "label": "Heading size",
      "default": 24
    },
    {
      "type": "range",
      "id": "desktop_slides",
      "min": 1,
      "max": 6,
      "step": 1,
      "label": "Number of slides on desktop",
      "default": 4
    },
    {
      "type": "range",
      "id": "mobile_slides",
      "min": 1,
      "max": 3,
      "step": 1,
      "label": "Number of slides on mobile",
      "default": 2
    },
    {
      "type": "range",
      "id": "max_products",
      "min": 3,
      "max": 20,
      "step": 1,
      "label": "Maximum products to show",
      "default": 10
    },
    {
      "type": "color",
      "id": "bg_color",
      "label": "Background color",
      "default": "#f5f5f5"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#333333"
    },
    {
      "type": "checkbox",
      "id": "show_swatches",
      "label": "Show color swatches",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_sizes",
      "label": "Show size swatches",
      "default": true
    }
  ],
  "presets": [
    {
      "name": "Custom Recent Products",
      "category": "Products"
    }
  ]
}
{% endschema %}