{%- liquid
  assign desktop_slides = section.settings.desktop_slides
  assign mobile_slides = section.settings.mobile_slides
  assign heading = section.settings.heading
  assign bg_color = section.settings.bg_color
  assign text_color = section.settings.text_color
  assign heading_size = section.settings.heading_size
  assign max_products = section.settings.max_products
-%}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css">
<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js" defer></script>

<style>
  .custom-recent-products {
    background-color: {{ bg_color }};
    color: {{ text_color }};
    padding: 40px 0;
    position: relative;
    z-index: 0;
  }

  .custom-recent-products__heading {
    font-size: {{ heading_size }}px;
    text-align: center;
    margin-bottom: 30px;
  }
  
  .custom-recent-products__slider {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    overflow: hidden;
  }
  
  .custom-recent-products__slide {
    height: auto;
    width: calc((100% - ({{ desktop_slides | minus: 1 }} * 30px)) / {{ desktop_slides }});
  }
  
  .swiper-button-next,
  .swiper-button-prev {
    color: {{ text_color }};
    background: rgba(255,255,255,0.5);
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  }
  
  .swiper-button-next:hover,
  .swiper-button-prev:hover {
    background: rgba(255,255,255,0.8);
  }
  
  .swiper-button-next::after,
  .swiper-button-prev::after {
    font-size: 20px;
  }

  /* Mobile styles */
  @media (max-width: 749px) {
    .custom-recent-products__slider {
      padding: 0 15px;
    }
    
    .custom-recent-products__heading {
      font-size: calc({{ heading_size }}px * 0.8);
    }
    
    .custom-recent-products__slide {
      width: calc((100% - ({{ mobile_slides | minus: 1 }} * 15px)) / {{ mobile_slides }});
    }
    
    .swiper-button-next,
    .swiper-button-prev {
      display: none;
    }
  }

  /* Special case for single product */
  .swiper-slide.swiper-slide-single {
    width: calc((100% - ({{ desktop_slides | minus: 1 }} * 30px)) / {{ desktop_slides }});
  }

  @media (max-width: 749px) {
    .swiper-slide.swiper-slide-single {
      width: calc((100% - ({{ mobile_slides | minus: 1 }} * 15px)) / {{ mobile_slides }});
    }
  }

  /* No products message */
  .custom-recent-products__no-products {
    text-align: center;
    padding: 40px 20px;
    color: {{ text_color }};
    font-size: 16px;
  }

  /* Hide section initially until products are loaded */
  .custom-recent-products[data-loading="true"] {
    display: none;
  }
</style>

<div class="custom-recent-products" data-section-id="{{ section.id }}" data-loading="true">
  {% if heading != blank %}
    <h2 class="custom-recent-products__heading">{{ heading }}</h2>
  {% endif %}
  
  <div class="custom-recent-products__slider-container">
    <div class="swiper custom-recent-products__slider">
      <div class="swiper-wrapper" id="recent-products-container-{{ section.id }}">
        <!-- Products will be loaded via JavaScript -->
      </div>
      
      <div class="swiper-button-next"></div>
      <div class="swiper-button-prev"></div>
    </div>
    
    <!-- No products message (initially hidden) -->
    <div class="custom-recent-products__no-products" id="no-products-message-{{ section.id }}" style="display: none;">
      <p>No recently viewed products yet</p>
    </div>
  </div>
</div>

<!-- Hidden template for product cards -->
<script type="text/template" id="product-card-template-{{ section.id }}">
  <div class="swiper-slide custom-recent-products__slide" data-product-id="{{PRODUCT_ID}}">
    <div class="prod-container">
      <div class="custom-badges-collection-card" id="badges-{{PRODUCT_ID}}">
        <!-- Badges will be populated by JavaScript -->
      </div>
      
      <div class="sale-item sale-item--icon icn" id="sale-badge-{{PRODUCT_ID}}" style="display: none;">
        Sale
      </div>
      
      <div class="so icn" id="soldout-badge-{{PRODUCT_ID}}" style="display: none;">
        {{ 'products.general.sold' | t }}
      </div>

      <div class="prod-image image_{{ settings.product_image_size | default: 'square' }} js-product-image">
        <a href="{{PRODUCT_URL}}" title="{{PRODUCT_TITLE_ESCAPED}}">
          <div class="reveal">
            <img src="{{PRODUCT_IMAGE}}" alt="{{PRODUCT_TITLE_ESCAPED}}" loading="lazy" />
          </div>
        </a>
      </div>

      {% if settings.quickview_type != 'none' %}
        {%- liquid
          if settings.quickview_type == 'modal'
            assign quickview_classes = 'js-modal-open'
            assign quickview_settings = 'data-wau-modal-target="quickview"'
          else
            assign quickview_classes = 'js-slideout-open'
            assign quickview_settings = 'data-wau-slideout-target="quickview" data-slideout-direction="right"'
          endif
        -%}
        <button class="quick-view-{{PRODUCT_ID}} product-listing__quickview-trigger {{ quickview_classes }} js-quickview-trigger"
          type="button"
          name="button"
          {{ quickview_settings }}
          data-product-url="{{PRODUCT_URL}}?view=quick">{{ 'products.general.quick_view' | t }}</button>
      {% endif %}

      <div id="custom-smart-wishlist">
        <span class="smartwishlist" data-product="{{PRODUCT_ID}}" data-variant="{{FIRST_VARIANT_ID}}"></span>
      </div>
    </div>

    <div class="product-info">
      <a href="{{PRODUCT_URL}}">
        {% if settings.vendor %}
          <p class="product__vendor">{{VENDOR}}</p>
        {% endif %}
        <h2>{{PRODUCT_TITLE}}</h2>
      </a>

      <div class="product-price" id="price-{{PRODUCT_ID}}">
        <!-- Price will be populated by JavaScript -->
      </div>
    </div>
  </div>
</script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const sectionId = '{{ section.id }}';
    const maxProducts = {{ max_products }};
    
    // Function to safely get recent products
    function getRecentProducts() {
      try {
        const storedData = localStorage.getItem('recentlyViewedProducts') || '[]';
        const products = JSON.parse(storedData);
        return products.filter(p => p && p.handle && p.id);
      } catch (e) {
        console.error('Error loading recent products:', e);
        return [];
      }
    }

    // Function to fetch product data from Shopify
    async function fetchProductData(handle) {
      try {
        const response = await fetch(`/products/${handle}.js`);
        if (!response.ok) throw new Error('Product not found');
        return await response.json();
      } catch (e) {
        console.error(`Error fetching product ${handle}:`, e);
        return null;
      }
    }

    // Function to format money
    function formatMoney(cents) {
      return '{{ shop.money_format }}'.replace('{{amount}}', (cents / 100).toFixed(2));
    }

    // Function to create product card HTML
    function createProductCard(product, shopifyProduct) {
      const template = document.getElementById(`product-card-template-${sectionId}`).innerHTML;
      
      // Get product image
      let productImage = product.image;
      if (!productImage && shopifyProduct && shopifyProduct.featured_image) {
        productImage = shopifyProduct.featured_image;
      }
      if (!productImage) {
        productImage = '{{ "product-placeholder.png" | asset_img_url: "400x" }}';
      }

      // Replace template variables
      let cardHtml = template
        .replace(/\{\{PRODUCT_ID\}\}/g, product.id)
        .replace(/\{\{PRODUCT_URL\}\}/g, product.url)
        .replace(/\{\{PRODUCT_TITLE\}\}/g, product.title)
        .replace(/\{\{PRODUCT_TITLE_ESCAPED\}\}/g, product.title.replace(/"/g, '&quot;'))
        .replace(/\{\{PRODUCT_IMAGE\}\}/g, productImage)
        .replace(/\{\{FIRST_VARIANT_ID\}\}/g, shopifyProduct ? shopifyProduct.variants[0].id : product.id)
        .replace(/\{\{VENDOR\}\}/g, shopifyProduct ? shopifyProduct.vendor : '');

      return cardHtml;
    }

    // Function to update product pricing and badges
    function updateProductDetails(productElement, shopifyProduct) {
      if (!shopifyProduct) return;

      const productId = shopifyProduct.id;
      
      // Update pricing
      const priceElement = productElement.querySelector(`#price-${productId}`);
      if (priceElement && shopifyProduct.variants && shopifyProduct.variants.length > 0) {
        const variant = shopifyProduct.variants[0];
        let priceHtml = `<span class="price">${formatMoney(variant.price)}</span>`;
        
        if (variant.compare_at_price && variant.compare_at_price > variant.price) {
          priceHtml = `<span class="price sale">${formatMoney(variant.price)}</span> ` +
                     `<span class="compare-price">${formatMoney(variant.compare_at_price)}</span>`;
          
          // Show sale badge
          const saleBadge = productElement.querySelector(`#sale-badge-${productId}`);
          if (saleBadge) saleBadge.style.display = 'block';
        }
        
        priceElement.innerHTML = priceHtml;
      }

      // Update availability
      if (!shopifyProduct.available) {
        const soldoutBadge = productElement.querySelector(`#soldout-badge-${productId}`);
        if (soldoutBadge) soldoutBadge.style.display = 'block';
      }

      // Update badges based on tags/collections (simplified)
      const badgesElement = productElement.querySelector(`#badges-${productId}`);
      if (badgesElement && shopifyProduct.tags) {
        let badgeHtml = '';
        
        if (shopifyProduct.tags.includes('bestseller')) {
          badgeHtml = '<span class="product-badge">Most loved</span>';
        } else if (shopifyProduct.tags.includes('new')) {
          badgeHtml = '<span class="product-badge">New In</span>';
        } else if (shopifyProduct.tags.includes('few-left')) {
          badgeHtml = '<span class="product-badge">Few Left</span>';
        }
        
        badgesElement.innerHTML = badgeHtml;
      }
    }

    async function initializeSlider(products) {
      const container = document.getElementById(`recent-products-container-${sectionId}`);
      const section = container?.closest('.custom-recent-products');
      const noProductsMessage = document.getElementById(`no-products-message-${sectionId}`);
      const sliderContainer = container?.closest('.custom-recent-products__slider-container');
      
      if (!container || !section) return;
      
      // Clear existing content
      container.innerHTML = '';
      
      // Handle empty state
      if (products.length === 0) {
        sliderContainer.style.display = 'none';
        noProductsMessage.style.display = 'block';
        section.setAttribute('data-loading', 'false');
        section.style.display = 'block';
        return;
      }
      
      // Show slider and hide no products message
      sliderContainer.style.display = 'block';
      noProductsMessage.style.display = 'none';
      
      // Limit products
      const limitedProducts = products.slice(0, maxProducts);
      
      // Create cards and fetch detailed product data
      const productPromises = limitedProducts.map(async (product) => {
        const shopifyProduct = await fetchProductData(product.handle);
        const cardHtml = createProductCard(product, shopifyProduct);
        
        // Create DOM element
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = cardHtml;
        const slideElement = tempDiv.firstElementChild;
        
        // Update product details with Shopify data
        updateProductDetails(slideElement, shopifyProduct);
        
        return slideElement;
      });
      
      const productElements = await Promise.all(productPromises);
      
      // Add all product cards to container
      productElements.forEach(element => {
        if (element) container.appendChild(element);
      });
      
      // Show section
      section.setAttribute('data-loading', 'false');
      section.style.display = 'block';
      
      // Initialize Swiper
      const sliderEl = container.closest('.swiper');
      if (window.recentProductsSwiper) {
        window.recentProductsSwiper.destroy(true, true);
      }
      
      window.recentProductsSwiper = new Swiper(sliderEl, {
        slidesPerView: 'auto',
        centeredSlides: false,
        spaceBetween: 20,
        watchOverflow: true,
        navigation: {
          nextEl: '.swiper-button-next',
          prevEl: '.swiper-button-prev',
        },
        breakpoints: {
          320: {
            slidesPerView: 'auto',
            spaceBetween: 15
          },
          750: {
            slidesPerView: 'auto',
            spaceBetween: 30
          }
        }
      });
      
      // Hide arrows if only one product
      if (productElements.filter(el => el).length === 1) {
        const arrows = sliderEl.querySelectorAll('.swiper-button-next, .swiper-button-prev');
        arrows.forEach(arrow => arrow.style.display = 'none');
      }

      // Initialize wishlist functionality if available
      if (typeof window.smartWishlist !== 'undefined') {
        window.smartWishlist.init();
      }
    }
    
    // Load and display products
    async function updateSlider() {
      const products = getRecentProducts();
      await initializeSlider(products);
    }
    
    // Initial load
    updateSlider();
    
    // Update when storage changes
    window.addEventListener('storage', updateSlider);
  });
</script>

{% schema %}
{
  "name": "Custom Recent Products",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Recently Viewed Products"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 12,
      "max": 36,
      "step": 1,
      "unit": "px",
      "label": "Heading size",
      "default": 24
    },
    {
      "type": "range",
      "id": "desktop_slides",
      "min": 1,
      "max": 6,
      "step": 1,
      "label": "Number of slides on desktop",
      "default": 4
    },
    {
      "type": "range",
      "id": "mobile_slides",
      "min": 1,
      "max": 3,
      "step": 1,
      "label": "Number of slides on mobile",
      "default": 2
    },
    {
      "type": "range",
      "id": "max_products",
      "min": 3,
      "max": 20,
      "step": 1,
      "label": "Maximum products to show",
      "default": 10
    },
    {
      "type": "color",
      "id": "bg_color",
      "label": "Background color",
      "default": "#f5f5f5"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#333333"
    }
  ],
  "presets": [
    {
      "name": "Custom Recent Products",
      "category": "Products"
    }
  ]
}
{% endschema %}