{%- liquid
  assign desktop_slides = section.settings.desktop_slides
  assign mobile_slides = section.settings.mobile_slides
  assign heading = section.settings.heading
  assign bg_color = section.settings.bg_color
  assign text_color = section.settings.text_color
  assign heading_size = section.settings.heading_size
  assign max_products = section.settings.max_products
-%}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css">
<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js" defer></script>

<style>
  .custom-recent-products {
    background-color: {{ bg_color }};
    color: {{ text_color }};
    padding: 40px 0;
    position: relative;
    z-index: 0;
  }

  .custom-recent-products__heading {
    font-size: {{ heading_size }}px;
    text-align: center;
    margin-bottom: 30px;
  }
  
  .custom-recent-products__slider {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    overflow: hidden;
  }
  
  .custom-recent-products__slide {
    height: auto;
    width: calc((100% - ({{ desktop_slides | minus: 1 }} * 30px)) / {{ desktop_slides }});
  }
  
  .swiper-button-next,
  .swiper-button-prev {
    color: {{ text_color }};
    background: rgba(255,255,255,0.5);
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  }
  
  .swiper-button-next:hover,
  .swiper-button-prev:hover {
    background: rgba(255,255,255,0.8);
  }
  
  .swiper-button-next::after,
  .swiper-button-prev::after {
    font-size: 20px;
  }

  /* Mobile styles */
  @media (max-width: 749px) {
    .custom-recent-products__slider {
      padding: 0 15px;
    }
    
    .custom-recent-products__heading {
      font-size: calc({{ heading_size }}px * 0.8);
    }
    
    .custom-recent-products__slide {
      width: calc((100% - ({{ mobile_slides | minus: 1 }} * 15px)) / {{ mobile_slides }});
    }
    
    .swiper-button-next,
    .swiper-button-prev {
      display: none;
    }
  }

  /* Special case for single product */
  .swiper-slide.swiper-slide-single {
    width: calc((100% - ({{ desktop_slides | minus: 1 }} * 30px)) / {{ desktop_slides }});
  }

  @media (max-width: 749px) {
    .swiper-slide.swiper-slide-single {
      width: calc((100% - ({{ mobile_slides | minus: 1 }} * 15px)) / {{ mobile_slides }});
    }
  }

  /* No products message */
  .custom-recent-products__no-products {
    text-align: center;
    padding: 40px 20px;
    color: {{ text_color }};
    font-size: 16px;
  }
</style>

<div class="custom-recent-products" data-section-id="{{ section.id }}">
  {% if heading != blank %}
    <h2 class="custom-recent-products__heading">{{ heading }}</h2>
  {% endif %}
  
  <div class="custom-recent-products__slider-container">
    <div class="swiper custom-recent-products__slider">
      <div class="swiper-wrapper" id="recent-products-container-{{ section.id }}">
        <!-- Products will be loaded via JavaScript -->
      </div>
      
      <div class="swiper-button-next"></div>
      <div class="swiper-button-prev"></div>
    </div>
    
    <!-- No products message (initially hidden) -->
    <div class="custom-recent-products__no-products" id="no-products-message-{{ section.id }}" style="display: none;">
      <p>No recently viewed products yet</p>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Function to safely get recent products
    function getRecentProducts() {
      try {
        const storedData = localStorage.getItem('recentlyViewedProducts') || '[]';
        const products = JSON.parse(storedData);
        
        // Basic validation - ensure each product has at least a handle and ID
        return products.filter(p => p && p.handle && p.id);
      } catch (e) {
        console.error('Error loading recent products:', e);
        return [];
      }
    }

    // Function to fetch product data from Shopify
    async function fetchProductData(handle) {
      try {
        const response = await fetch(`/products/${handle}.js`);
        if (!response.ok) throw new Error('Product not found');
        return await response.json();
      } catch (e) {
        console.error(`Error fetching product ${handle}:`, e);
        return null;
      }
    }

    // Function to render product card using Shopify's liquid template
    async function renderProductCard(productHandle) {
      try {
        const response = await fetch(`/products/${productHandle}?view=card`);
        if (!response.ok) throw new Error('Failed to fetch product card');
        return await response.text();
      } catch (e) {
        console.error(`Error rendering product card for ${productHandle}:`, e);
        return null;
      }
    }

    async function initializeSlider(products, sectionId) {
      const container = document.getElementById(`recent-products-container-${sectionId}`);
      const section = container?.closest('.custom-recent-products');
      const noProductsMessage = document.getElementById(`no-products-message-${sectionId}`);
      const sliderContainer = container?.closest('.custom-recent-products__slider-container');
      
      if (!container || !section) return;
      
      // Clear existing content
      container.innerHTML = '';
      
      // Handle empty state
      if (products.length === 0) {
        sliderContainer.style.display = 'none';
        noProductsMessage.style.display = 'block';
        return;
      }
      
      // Show slider and hide no products message
      sliderContainer.style.display = 'block';
      noProductsMessage.style.display = 'none';
      
      // Limit products based on max_products setting
      const limitedProducts = products.slice(0, {{ max_products }});
      
      // Load product cards
      const productCards = await Promise.all(
        limitedProducts.map(async (product) => {
          const cardHtml = await renderProductCard(product.handle);
          return cardHtml ? { html: cardHtml, handle: product.handle } : null;
        })
      );
      
      // Filter out failed requests
      const validCards = productCards.filter(card => card !== null);
      
      if (validCards.length === 0) {
        sliderContainer.style.display = 'none';
        noProductsMessage.style.display = 'block';
        return;
      }
      
      // Create slides for each product card
      validCards.forEach(card => {
        const slide = document.createElement('div');
        slide.className = validCards.length === 1 ? 
          'swiper-slide custom-recent-products__slide swiper-slide-single' : 
          'swiper-slide custom-recent-products__slide';
        
        slide.innerHTML = card.html;
        container.appendChild(slide);
      });
      
      // Initialize Swiper (destroy old instance if exists)
      const sliderEl = container.closest('.swiper');
      if (window.recentProductsSwiper) {
        window.recentProductsSwiper.destroy(true, true);
      }
      
      window.recentProductsSwiper = new Swiper(sliderEl, {
        slidesPerView: 'auto',
        centeredSlides: false,
        spaceBetween: 20,
        watchOverflow: true,
        navigation: {
          nextEl: '.swiper-button-next',
          prevEl: '.swiper-button-prev',
        },
        breakpoints: {
          320: {
            slidesPerView: 'auto',
            spaceBetween: 15
          },
          750: {
            slidesPerView: 'auto',
            spaceBetween: 30
          }
        }
      });
      
      // Hide arrows if only one product
      if (validCards.length === 1) {
        const arrows = sliderEl.querySelectorAll('.swiper-button-next, .swiper-button-prev');
        arrows.forEach(arrow => arrow.style.display = 'none');
      }
    }
    
    // Load and display products
    async function updateSlider() {
      const products = getRecentProducts();
      await initializeSlider(products, '{{ section.id }}');
    }
    
    // Initial load
    updateSlider();
    
    // Update when storage changes
    window.addEventListener('storage', updateSlider);
  });
</script>

{% schema %}
{
  "name": "Custom Recent Products",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Recently Viewed Products"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 12,
      "max": 36,
      "step": 1,
      "unit": "px",
      "label": "Heading size",
      "default": 24
    },
    {
      "type": "range",
      "id": "desktop_slides",
      "min": 1,
      "max": 6,
      "step": 1,
      "label": "Number of slides on desktop",
      "default": 4
    },
    {
      "type": "range",
      "id": "mobile_slides",
      "min": 1,
      "max": 3,
      "step": 1,
      "label": "Number of slides on mobile",
      "default": 2
    },
    {
      "type": "range",
      "id": "max_products",
      "min": 3,
      "max": 20,
      "step": 1,
      "label": "Maximum products to show",
      "default": 10
    },
    {
      "type": "color",
      "id": "bg_color",
      "label": "Background color",
      "default": "#f5f5f5"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#333333"
    }
  ],
  "presets": [
    {
      "name": "Custom Recent Products",
      "category": "Products"
    }
  ]
}
{% endschema %}